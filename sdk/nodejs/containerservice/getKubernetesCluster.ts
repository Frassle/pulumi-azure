// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getKubernetesCluster(args: GetKubernetesClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesClusterResult> {
    return pulumi.runtime.invoke("azure:containerservice/getKubernetesCluster:getKubernetesCluster", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesCluster.
 */
export interface GetKubernetesClusterArgs {
    readonly name: string;
    readonly resourceGroupName: string;
}

/**
 * A collection of values returned by getKubernetesCluster.
 */
export interface GetKubernetesClusterResult {
    readonly addonProfiles: { httpApplicationRoutings: { enabled: boolean, httpApplicationRoutingZoneName: string }[], omsAgents: { enabled: boolean, logAnalyticsWorkspaceId: string }[] }[];
    readonly agentPoolProfiles: { count: number, dnsPrefix: string, maxPods: number, name: string, osDiskSizeGb: number, osType: string, vmSize: string, vnetSubnetId: string }[];
    readonly dnsPrefix: string;
    readonly fqdn: string;
    readonly kubeAdminConfigs: { clientCertificate: string, clientKey: string, clusterCaCertificate: string, host: string, password: string, username: string }[];
    readonly kubeAdminConfigRaw: string;
    readonly kubeConfigs: { clientCertificate: string, clientKey: string, clusterCaCertificate: string, host: string, password: string, username: string }[];
    readonly kubeConfigRaw: string;
    readonly kubernetesVersion: string;
    readonly linuxProfiles: { adminUsername: string, sshKeys: { keyData: string }[] }[];
    readonly location: string;
    readonly networkProfiles: { dnsServiceIp: string, dockerBridgeCidr: string, networkPlugin: string, podCidr: string, serviceCidr: string }[];
    readonly nodeResourceGroup: string;
    readonly roleBasedAccessControls: { azureActiveDirectories: { clientAppId: string, serverAppId: string, tenantId: string }[], enabled: boolean }[];
    readonly servicePrincipals: { clientId: string }[];
    readonly tags: {[key: string]: any};
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
