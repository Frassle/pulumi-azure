// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class PolicySetDefinition extends pulumi.CustomResource {
    /**
     * Get an existing PolicySetDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySetDefinitionState, opts?: pulumi.CustomResourceOptions): PolicySetDefinition {
        return new PolicySetDefinition(name, <any>state, { ...opts, id: id });
    }

    public readonly description: pulumi.Output<string | undefined>;
    public readonly displayName: pulumi.Output<string>;
    public readonly managementGroupId: pulumi.Output<string | undefined>;
    public readonly metadata: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly parameters: pulumi.Output<string | undefined>;
    public readonly policyDefinitions: pulumi.Output<string | undefined>;
    public readonly policyType: pulumi.Output<string>;

    /**
     * Create a PolicySetDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicySetDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySetDefinitionArgs | PolicySetDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: PolicySetDefinitionState = argsOrState as PolicySetDefinitionState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["managementGroupId"] = state ? state.managementGroupId : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["policyDefinitions"] = state ? state.policyDefinitions : undefined;
            inputs["policyType"] = state ? state.policyType : undefined;
        } else {
            const args = argsOrState as PolicySetDefinitionArgs | undefined;
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.policyType === undefined) {
                throw new Error("Missing required property 'policyType'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["managementGroupId"] = args ? args.managementGroupId : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["policyDefinitions"] = args ? args.policyDefinitions : undefined;
            inputs["policyType"] = args ? args.policyType : undefined;
        }
        super("azure:policy/policySetDefinition:PolicySetDefinition", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicySetDefinition resources.
 */
export interface PolicySetDefinitionState {
    readonly description?: pulumi.Input<string>;
    readonly displayName?: pulumi.Input<string>;
    readonly managementGroupId?: pulumi.Input<string>;
    readonly metadata?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly parameters?: pulumi.Input<string>;
    readonly policyDefinitions?: pulumi.Input<string>;
    readonly policyType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicySetDefinition resource.
 */
export interface PolicySetDefinitionArgs {
    readonly description?: pulumi.Input<string>;
    readonly displayName: pulumi.Input<string>;
    readonly managementGroupId?: pulumi.Input<string>;
    readonly metadata?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly parameters?: pulumi.Input<string>;
    readonly policyDefinitions?: pulumi.Input<string>;
    readonly policyType: pulumi.Input<string>;
}
