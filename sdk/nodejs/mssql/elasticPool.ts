// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ElasticPool extends pulumi.CustomResource {
    /**
     * Get an existing ElasticPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticPoolState, opts?: pulumi.CustomResourceOptions): ElasticPool {
        return new ElasticPool(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly elasticPoolProperties: pulumi.Output<{ creationDate: string, licenseType: string, maxSizeBytes: number, state: string, zoneRedundant: boolean }>;
    public readonly location: pulumi.Output<string>;
    public /*out*/ readonly maxSizeBytes: pulumi.Output<number>;
    public readonly name: pulumi.Output<string>;
    public readonly perDatabaseSettings: pulumi.Output<{ maxCapacity: number, minCapacity: number }>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly serverName: pulumi.Output<string>;
    public readonly sku: pulumi.Output<{ capacity: number, family?: string, name: string, tier: string }>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly zoneRedundant: pulumi.Output<boolean>;

    /**
     * Create a ElasticPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticPoolArgs | ElasticPoolState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ElasticPoolState = argsOrState as ElasticPoolState | undefined;
            inputs["elasticPoolProperties"] = state ? state.elasticPoolProperties : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["maxSizeBytes"] = state ? state.maxSizeBytes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["perDatabaseSettings"] = state ? state.perDatabaseSettings : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["serverName"] = state ? state.serverName : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        } else {
            const args = argsOrState as ElasticPoolArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.perDatabaseSettings === undefined) {
                throw new Error("Missing required property 'perDatabaseSettings'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.serverName === undefined) {
                throw new Error("Missing required property 'serverName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["perDatabaseSettings"] = args ? args.perDatabaseSettings : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["elasticPoolProperties"] = undefined /*out*/;
            inputs["maxSizeBytes"] = undefined /*out*/;
            inputs["zoneRedundant"] = undefined /*out*/;
        }
        super("azure:mssql/elasticPool:ElasticPool", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElasticPool resources.
 */
export interface ElasticPoolState {
    readonly elasticPoolProperties?: pulumi.Input<{ creationDate?: pulumi.Input<string>, licenseType?: pulumi.Input<string>, maxSizeBytes?: pulumi.Input<number>, state?: pulumi.Input<string>, zoneRedundant?: pulumi.Input<boolean> }>;
    readonly location?: pulumi.Input<string>;
    readonly maxSizeBytes?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly perDatabaseSettings?: pulumi.Input<{ maxCapacity: pulumi.Input<number>, minCapacity: pulumi.Input<number> }>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly serverName?: pulumi.Input<string>;
    readonly sku?: pulumi.Input<{ capacity: pulumi.Input<number>, family?: pulumi.Input<string>, name: pulumi.Input<string>, tier: pulumi.Input<string> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly zoneRedundant?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ElasticPool resource.
 */
export interface ElasticPoolArgs {
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly perDatabaseSettings: pulumi.Input<{ maxCapacity: pulumi.Input<number>, minCapacity: pulumi.Input<number> }>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly serverName: pulumi.Input<string>;
    readonly sku: pulumi.Input<{ capacity: pulumi.Input<number>, family?: pulumi.Input<string>, name: pulumi.Input<string>, tier: pulumi.Input<string> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
