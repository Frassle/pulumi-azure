// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Store extends pulumi.CustomResource {
    /**
     * Get an existing Store resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoreState, opts?: pulumi.CustomResourceOptions): Store {
        return new Store(name, <any>state, { ...opts, id: id });
    }

    public readonly encryptionState: pulumi.Output<string | undefined>;
    public readonly encryptionType: pulumi.Output<string>;
    public /*out*/ readonly endpoint: pulumi.Output<string>;
    public readonly firewallAllowAzureIps: pulumi.Output<string | undefined>;
    public readonly firewallState: pulumi.Output<string | undefined>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly tier: pulumi.Output<string | undefined>;

    /**
     * Create a Store resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoreArgs | StoreState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: StoreState = argsOrState as StoreState | undefined;
            inputs["encryptionState"] = state ? state.encryptionState : undefined;
            inputs["encryptionType"] = state ? state.encryptionType : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["firewallAllowAzureIps"] = state ? state.firewallAllowAzureIps : undefined;
            inputs["firewallState"] = state ? state.firewallState : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tier"] = state ? state.tier : undefined;
        } else {
            const args = argsOrState as StoreArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["encryptionState"] = args ? args.encryptionState : undefined;
            inputs["encryptionType"] = args ? args.encryptionType : undefined;
            inputs["firewallAllowAzureIps"] = args ? args.firewallAllowAzureIps : undefined;
            inputs["firewallState"] = args ? args.firewallState : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["endpoint"] = undefined /*out*/;
        }
        super("azure:datalake/store:Store", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Store resources.
 */
export interface StoreState {
    readonly encryptionState?: pulumi.Input<string>;
    readonly encryptionType?: pulumi.Input<string>;
    readonly endpoint?: pulumi.Input<string>;
    readonly firewallAllowAzureIps?: pulumi.Input<string>;
    readonly firewallState?: pulumi.Input<string>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Store resource.
 */
export interface StoreArgs {
    readonly encryptionState?: pulumi.Input<string>;
    readonly encryptionType?: pulumi.Input<string>;
    readonly firewallAllowAzureIps?: pulumi.Input<string>;
    readonly firewallState?: pulumi.Input<string>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tier?: pulumi.Input<string>;
}
