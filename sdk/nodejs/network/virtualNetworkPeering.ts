// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VirtualNetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkPeeringState, opts?: pulumi.CustomResourceOptions): VirtualNetworkPeering {
        return new VirtualNetworkPeering(name, <any>state, { ...opts, id: id });
    }

    public readonly allowForwardedTraffic: pulumi.Output<boolean>;
    public readonly allowGatewayTransit: pulumi.Output<boolean>;
    public readonly allowVirtualNetworkAccess: pulumi.Output<boolean>;
    public readonly name: pulumi.Output<string>;
    public readonly remoteVirtualNetworkId: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly useRemoteGateways: pulumi.Output<boolean>;
    public readonly virtualNetworkName: pulumi.Output<string>;

    /**
     * Create a VirtualNetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkPeeringArgs | VirtualNetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VirtualNetworkPeeringState = argsOrState as VirtualNetworkPeeringState | undefined;
            inputs["allowForwardedTraffic"] = state ? state.allowForwardedTraffic : undefined;
            inputs["allowGatewayTransit"] = state ? state.allowGatewayTransit : undefined;
            inputs["allowVirtualNetworkAccess"] = state ? state.allowVirtualNetworkAccess : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["remoteVirtualNetworkId"] = state ? state.remoteVirtualNetworkId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["useRemoteGateways"] = state ? state.useRemoteGateways : undefined;
            inputs["virtualNetworkName"] = state ? state.virtualNetworkName : undefined;
        } else {
            const args = argsOrState as VirtualNetworkPeeringArgs | undefined;
            if (!args || args.remoteVirtualNetworkId === undefined) {
                throw new Error("Missing required property 'remoteVirtualNetworkId'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.virtualNetworkName === undefined) {
                throw new Error("Missing required property 'virtualNetworkName'");
            }
            inputs["allowForwardedTraffic"] = args ? args.allowForwardedTraffic : undefined;
            inputs["allowGatewayTransit"] = args ? args.allowGatewayTransit : undefined;
            inputs["allowVirtualNetworkAccess"] = args ? args.allowVirtualNetworkAccess : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["remoteVirtualNetworkId"] = args ? args.remoteVirtualNetworkId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["useRemoteGateways"] = args ? args.useRemoteGateways : undefined;
            inputs["virtualNetworkName"] = args ? args.virtualNetworkName : undefined;
        }
        super("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetworkPeering resources.
 */
export interface VirtualNetworkPeeringState {
    readonly allowForwardedTraffic?: pulumi.Input<boolean>;
    readonly allowGatewayTransit?: pulumi.Input<boolean>;
    readonly allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly remoteVirtualNetworkId?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly useRemoteGateways?: pulumi.Input<boolean>;
    readonly virtualNetworkName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualNetworkPeering resource.
 */
export interface VirtualNetworkPeeringArgs {
    readonly allowForwardedTraffic?: pulumi.Input<boolean>;
    readonly allowGatewayTransit?: pulumi.Input<boolean>;
    readonly allowVirtualNetworkAccess?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly remoteVirtualNetworkId: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly useRemoteGateways?: pulumi.Input<boolean>;
    readonly virtualNetworkName: pulumi.Input<string>;
}
