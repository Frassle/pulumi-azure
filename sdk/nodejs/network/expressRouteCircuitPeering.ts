// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ExpressRouteCircuitPeering extends pulumi.CustomResource {
    /**
     * Get an existing ExpressRouteCircuitPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressRouteCircuitPeeringState, opts?: pulumi.CustomResourceOptions): ExpressRouteCircuitPeering {
        return new ExpressRouteCircuitPeering(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly azureAsn: pulumi.Output<number>;
    public readonly expressRouteCircuitName: pulumi.Output<string>;
    public readonly microsoftPeeringConfig: pulumi.Output<{ advertisedPublicPrefixes: string[] } | undefined>;
    public readonly peerAsn: pulumi.Output<number>;
    public readonly peeringType: pulumi.Output<string>;
    public /*out*/ readonly primaryAzurePort: pulumi.Output<string>;
    public readonly primaryPeerAddressPrefix: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public /*out*/ readonly secondaryAzurePort: pulumi.Output<string>;
    public readonly secondaryPeerAddressPrefix: pulumi.Output<string>;
    public readonly sharedKey: pulumi.Output<string | undefined>;
    public readonly vlanId: pulumi.Output<number>;

    /**
     * Create a ExpressRouteCircuitPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressRouteCircuitPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressRouteCircuitPeeringArgs | ExpressRouteCircuitPeeringState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ExpressRouteCircuitPeeringState = argsOrState as ExpressRouteCircuitPeeringState | undefined;
            inputs["azureAsn"] = state ? state.azureAsn : undefined;
            inputs["expressRouteCircuitName"] = state ? state.expressRouteCircuitName : undefined;
            inputs["microsoftPeeringConfig"] = state ? state.microsoftPeeringConfig : undefined;
            inputs["peerAsn"] = state ? state.peerAsn : undefined;
            inputs["peeringType"] = state ? state.peeringType : undefined;
            inputs["primaryAzurePort"] = state ? state.primaryAzurePort : undefined;
            inputs["primaryPeerAddressPrefix"] = state ? state.primaryPeerAddressPrefix : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["secondaryAzurePort"] = state ? state.secondaryAzurePort : undefined;
            inputs["secondaryPeerAddressPrefix"] = state ? state.secondaryPeerAddressPrefix : undefined;
            inputs["sharedKey"] = state ? state.sharedKey : undefined;
            inputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as ExpressRouteCircuitPeeringArgs | undefined;
            if (!args || args.expressRouteCircuitName === undefined) {
                throw new Error("Missing required property 'expressRouteCircuitName'");
            }
            if (!args || args.peeringType === undefined) {
                throw new Error("Missing required property 'peeringType'");
            }
            if (!args || args.primaryPeerAddressPrefix === undefined) {
                throw new Error("Missing required property 'primaryPeerAddressPrefix'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.secondaryPeerAddressPrefix === undefined) {
                throw new Error("Missing required property 'secondaryPeerAddressPrefix'");
            }
            if (!args || args.vlanId === undefined) {
                throw new Error("Missing required property 'vlanId'");
            }
            inputs["expressRouteCircuitName"] = args ? args.expressRouteCircuitName : undefined;
            inputs["microsoftPeeringConfig"] = args ? args.microsoftPeeringConfig : undefined;
            inputs["peerAsn"] = args ? args.peerAsn : undefined;
            inputs["peeringType"] = args ? args.peeringType : undefined;
            inputs["primaryPeerAddressPrefix"] = args ? args.primaryPeerAddressPrefix : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["secondaryPeerAddressPrefix"] = args ? args.secondaryPeerAddressPrefix : undefined;
            inputs["sharedKey"] = args ? args.sharedKey : undefined;
            inputs["vlanId"] = args ? args.vlanId : undefined;
            inputs["azureAsn"] = undefined /*out*/;
            inputs["primaryAzurePort"] = undefined /*out*/;
            inputs["secondaryAzurePort"] = undefined /*out*/;
        }
        super("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExpressRouteCircuitPeering resources.
 */
export interface ExpressRouteCircuitPeeringState {
    readonly azureAsn?: pulumi.Input<number>;
    readonly expressRouteCircuitName?: pulumi.Input<string>;
    readonly microsoftPeeringConfig?: pulumi.Input<{ advertisedPublicPrefixes: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly peerAsn?: pulumi.Input<number>;
    readonly peeringType?: pulumi.Input<string>;
    readonly primaryAzurePort?: pulumi.Input<string>;
    readonly primaryPeerAddressPrefix?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly secondaryAzurePort?: pulumi.Input<string>;
    readonly secondaryPeerAddressPrefix?: pulumi.Input<string>;
    readonly sharedKey?: pulumi.Input<string>;
    readonly vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExpressRouteCircuitPeering resource.
 */
export interface ExpressRouteCircuitPeeringArgs {
    readonly expressRouteCircuitName: pulumi.Input<string>;
    readonly microsoftPeeringConfig?: pulumi.Input<{ advertisedPublicPrefixes: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly peerAsn?: pulumi.Input<number>;
    readonly peeringType: pulumi.Input<string>;
    readonly primaryPeerAddressPrefix: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly secondaryPeerAddressPrefix: pulumi.Input<string>;
    readonly sharedKey?: pulumi.Input<string>;
    readonly vlanId: pulumi.Input<number>;
}
