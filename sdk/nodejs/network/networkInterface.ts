// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInterfaceState, opts?: pulumi.CustomResourceOptions): NetworkInterface {
        return new NetworkInterface(name, <any>state, { ...opts, id: id });
    }

    public readonly appliedDnsServers: pulumi.Output<string[]>;
    public readonly dnsServers: pulumi.Output<string[]>;
    public readonly enableAcceleratedNetworking: pulumi.Output<boolean | undefined>;
    public readonly enableIpForwarding: pulumi.Output<boolean | undefined>;
    public readonly internalDnsNameLabel: pulumi.Output<string>;
    public readonly internalFqdn: pulumi.Output<string>;
    public readonly ipConfigurations: pulumi.Output<{ applicationGatewayBackendAddressPoolsIds: string[], applicationSecurityGroupIds: string[], loadBalancerBackendAddressPoolsIds: string[], loadBalancerInboundNatRulesIds: string[], name: string, primary: boolean, privateIpAddress?: string, privateIpAddressAllocation: string, privateIpAddressVersion?: string, publicIpAddressId?: string, subnetId?: string }[]>;
    public readonly location: pulumi.Output<string>;
    public readonly macAddress: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly networkSecurityGroupId: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIpAddress: pulumi.Output<string>;
    public /*out*/ readonly privateIpAddresses: pulumi.Output<string[]>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly virtualMachineId: pulumi.Output<string>;

    /**
     * Create a NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInterfaceArgs | NetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: NetworkInterfaceState = argsOrState as NetworkInterfaceState | undefined;
            inputs["appliedDnsServers"] = state ? state.appliedDnsServers : undefined;
            inputs["dnsServers"] = state ? state.dnsServers : undefined;
            inputs["enableAcceleratedNetworking"] = state ? state.enableAcceleratedNetworking : undefined;
            inputs["enableIpForwarding"] = state ? state.enableIpForwarding : undefined;
            inputs["internalDnsNameLabel"] = state ? state.internalDnsNameLabel : undefined;
            inputs["internalFqdn"] = state ? state.internalFqdn : undefined;
            inputs["ipConfigurations"] = state ? state.ipConfigurations : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["macAddress"] = state ? state.macAddress : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkSecurityGroupId"] = state ? state.networkSecurityGroupId : undefined;
            inputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            inputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        } else {
            const args = argsOrState as NetworkInterfaceArgs | undefined;
            if (!args || args.ipConfigurations === undefined) {
                throw new Error("Missing required property 'ipConfigurations'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["appliedDnsServers"] = args ? args.appliedDnsServers : undefined;
            inputs["dnsServers"] = args ? args.dnsServers : undefined;
            inputs["enableAcceleratedNetworking"] = args ? args.enableAcceleratedNetworking : undefined;
            inputs["enableIpForwarding"] = args ? args.enableIpForwarding : undefined;
            inputs["internalDnsNameLabel"] = args ? args.internalDnsNameLabel : undefined;
            inputs["internalFqdn"] = args ? args.internalFqdn : undefined;
            inputs["ipConfigurations"] = args ? args.ipConfigurations : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["macAddress"] = args ? args.macAddress : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkSecurityGroupId"] = args ? args.networkSecurityGroupId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
            inputs["privateIpAddress"] = undefined /*out*/;
            inputs["privateIpAddresses"] = undefined /*out*/;
        }
        super("azure:network/networkInterface:NetworkInterface", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInterface resources.
 */
export interface NetworkInterfaceState {
    readonly appliedDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly enableAcceleratedNetworking?: pulumi.Input<boolean>;
    readonly enableIpForwarding?: pulumi.Input<boolean>;
    readonly internalDnsNameLabel?: pulumi.Input<string>;
    readonly internalFqdn?: pulumi.Input<string>;
    readonly ipConfigurations?: pulumi.Input<pulumi.Input<{ applicationGatewayBackendAddressPoolsIds?: pulumi.Input<pulumi.Input<string>[]>, applicationSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>, loadBalancerBackendAddressPoolsIds?: pulumi.Input<pulumi.Input<string>[]>, loadBalancerInboundNatRulesIds?: pulumi.Input<pulumi.Input<string>[]>, name: pulumi.Input<string>, primary?: pulumi.Input<boolean>, privateIpAddress?: pulumi.Input<string>, privateIpAddressAllocation: pulumi.Input<string>, privateIpAddressVersion?: pulumi.Input<string>, publicIpAddressId?: pulumi.Input<string>, subnetId?: pulumi.Input<string> }>[]>;
    readonly location?: pulumi.Input<string>;
    readonly macAddress?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkSecurityGroupId?: pulumi.Input<string>;
    readonly privateIpAddress?: pulumi.Input<string>;
    readonly privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly virtualMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkInterface resource.
 */
export interface NetworkInterfaceArgs {
    readonly appliedDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly enableAcceleratedNetworking?: pulumi.Input<boolean>;
    readonly enableIpForwarding?: pulumi.Input<boolean>;
    readonly internalDnsNameLabel?: pulumi.Input<string>;
    readonly internalFqdn?: pulumi.Input<string>;
    readonly ipConfigurations: pulumi.Input<pulumi.Input<{ applicationGatewayBackendAddressPoolsIds?: pulumi.Input<pulumi.Input<string>[]>, applicationSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>, loadBalancerBackendAddressPoolsIds?: pulumi.Input<pulumi.Input<string>[]>, loadBalancerInboundNatRulesIds?: pulumi.Input<pulumi.Input<string>[]>, name: pulumi.Input<string>, primary?: pulumi.Input<boolean>, privateIpAddress?: pulumi.Input<string>, privateIpAddressAllocation: pulumi.Input<string>, privateIpAddressVersion?: pulumi.Input<string>, publicIpAddressId?: pulumi.Input<string>, subnetId?: pulumi.Input<string> }>[]>;
    readonly location: pulumi.Input<string>;
    readonly macAddress?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkSecurityGroupId?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly virtualMachineId?: pulumi.Input<string>;
}
