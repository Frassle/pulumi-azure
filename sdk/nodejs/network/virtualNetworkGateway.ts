// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VirtualNetworkGateway extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkGatewayState, opts?: pulumi.CustomResourceOptions): VirtualNetworkGateway {
        return new VirtualNetworkGateway(name, <any>state, { ...opts, id: id });
    }

    public readonly activeActive: pulumi.Output<boolean>;
    public readonly bgpSettings: pulumi.Output<{ asn?: number, peerWeight?: number, peeringAddress: string }>;
    public readonly defaultLocalNetworkGatewayId: pulumi.Output<string | undefined>;
    public readonly enableBgp: pulumi.Output<boolean>;
    public readonly ipConfigurations: pulumi.Output<{ name?: string, privateIpAddressAllocation?: string, publicIpAddressId?: string, subnetId: string }[]>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly sku: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly type: pulumi.Output<string>;
    public readonly vpnClientConfiguration: pulumi.Output<{ addressSpaces: string[], radiusServerAddress?: string, radiusServerSecret?: string, revokedCertificates?: { name: string, thumbprint: string }[], rootCertificates?: { name: string, publicCertData: string }[], vpnClientProtocols?: string[] } | undefined>;
    public readonly vpnType: pulumi.Output<string | undefined>;

    /**
     * Create a VirtualNetworkGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkGatewayArgs | VirtualNetworkGatewayState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VirtualNetworkGatewayState = argsOrState as VirtualNetworkGatewayState | undefined;
            inputs["activeActive"] = state ? state.activeActive : undefined;
            inputs["bgpSettings"] = state ? state.bgpSettings : undefined;
            inputs["defaultLocalNetworkGatewayId"] = state ? state.defaultLocalNetworkGatewayId : undefined;
            inputs["enableBgp"] = state ? state.enableBgp : undefined;
            inputs["ipConfigurations"] = state ? state.ipConfigurations : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["vpnClientConfiguration"] = state ? state.vpnClientConfiguration : undefined;
            inputs["vpnType"] = state ? state.vpnType : undefined;
        } else {
            const args = argsOrState as VirtualNetworkGatewayArgs | undefined;
            if (!args || args.ipConfigurations === undefined) {
                throw new Error("Missing required property 'ipConfigurations'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["activeActive"] = args ? args.activeActive : undefined;
            inputs["bgpSettings"] = args ? args.bgpSettings : undefined;
            inputs["defaultLocalNetworkGatewayId"] = args ? args.defaultLocalNetworkGatewayId : undefined;
            inputs["enableBgp"] = args ? args.enableBgp : undefined;
            inputs["ipConfigurations"] = args ? args.ipConfigurations : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vpnClientConfiguration"] = args ? args.vpnClientConfiguration : undefined;
            inputs["vpnType"] = args ? args.vpnType : undefined;
        }
        super("azure:network/virtualNetworkGateway:VirtualNetworkGateway", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetworkGateway resources.
 */
export interface VirtualNetworkGatewayState {
    readonly activeActive?: pulumi.Input<boolean>;
    readonly bgpSettings?: pulumi.Input<{ asn?: pulumi.Input<number>, peerWeight?: pulumi.Input<number>, peeringAddress?: pulumi.Input<string> }>;
    readonly defaultLocalNetworkGatewayId?: pulumi.Input<string>;
    readonly enableBgp?: pulumi.Input<boolean>;
    readonly ipConfigurations?: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, privateIpAddressAllocation?: pulumi.Input<string>, publicIpAddressId?: pulumi.Input<string>, subnetId: pulumi.Input<string> }>[]>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly sku?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly type?: pulumi.Input<string>;
    readonly vpnClientConfiguration?: pulumi.Input<{ addressSpaces: pulumi.Input<pulumi.Input<string>[]>, radiusServerAddress?: pulumi.Input<string>, radiusServerSecret?: pulumi.Input<string>, revokedCertificates?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, thumbprint: pulumi.Input<string> }>[]>, rootCertificates?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, publicCertData: pulumi.Input<string> }>[]>, vpnClientProtocols?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly vpnType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualNetworkGateway resource.
 */
export interface VirtualNetworkGatewayArgs {
    readonly activeActive?: pulumi.Input<boolean>;
    readonly bgpSettings?: pulumi.Input<{ asn?: pulumi.Input<number>, peerWeight?: pulumi.Input<number>, peeringAddress?: pulumi.Input<string> }>;
    readonly defaultLocalNetworkGatewayId?: pulumi.Input<string>;
    readonly enableBgp?: pulumi.Input<boolean>;
    readonly ipConfigurations: pulumi.Input<pulumi.Input<{ name?: pulumi.Input<string>, privateIpAddressAllocation?: pulumi.Input<string>, publicIpAddressId?: pulumi.Input<string>, subnetId: pulumi.Input<string> }>[]>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly sku: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly type: pulumi.Input<string>;
    readonly vpnClientConfiguration?: pulumi.Input<{ addressSpaces: pulumi.Input<pulumi.Input<string>[]>, radiusServerAddress?: pulumi.Input<string>, radiusServerSecret?: pulumi.Input<string>, revokedCertificates?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, thumbprint: pulumi.Input<string> }>[]>, rootCertificates?: pulumi.Input<pulumi.Input<{ name: pulumi.Input<string>, publicCertData: pulumi.Input<string> }>[]>, vpnClientProtocols?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly vpnType?: pulumi.Input<string>;
}
