// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class PacketCapture extends pulumi.CustomResource {
    /**
     * Get an existing PacketCapture resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PacketCaptureState, opts?: pulumi.CustomResourceOptions): PacketCapture {
        return new PacketCapture(name, <any>state, { ...opts, id: id });
    }

    public readonly filters: pulumi.Output<{ localIpAddress?: string, localPort?: string, protocol: string, remoteIpAddress?: string, remotePort?: string }[] | undefined>;
    public readonly maximumBytesPerPacket: pulumi.Output<number | undefined>;
    public readonly maximumBytesPerSession: pulumi.Output<number | undefined>;
    public readonly maximumCaptureDuration: pulumi.Output<number | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly networkWatcherName: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly storageLocation: pulumi.Output<{ filePath?: string, storageAccountId?: string, storagePath: string }>;
    public readonly targetResourceId: pulumi.Output<string>;

    /**
     * Create a PacketCapture resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PacketCaptureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PacketCaptureArgs | PacketCaptureState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: PacketCaptureState = argsOrState as PacketCaptureState | undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["maximumBytesPerPacket"] = state ? state.maximumBytesPerPacket : undefined;
            inputs["maximumBytesPerSession"] = state ? state.maximumBytesPerSession : undefined;
            inputs["maximumCaptureDuration"] = state ? state.maximumCaptureDuration : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkWatcherName"] = state ? state.networkWatcherName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["storageLocation"] = state ? state.storageLocation : undefined;
            inputs["targetResourceId"] = state ? state.targetResourceId : undefined;
        } else {
            const args = argsOrState as PacketCaptureArgs | undefined;
            if (!args || args.networkWatcherName === undefined) {
                throw new Error("Missing required property 'networkWatcherName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.storageLocation === undefined) {
                throw new Error("Missing required property 'storageLocation'");
            }
            if (!args || args.targetResourceId === undefined) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            inputs["filters"] = args ? args.filters : undefined;
            inputs["maximumBytesPerPacket"] = args ? args.maximumBytesPerPacket : undefined;
            inputs["maximumBytesPerSession"] = args ? args.maximumBytesPerSession : undefined;
            inputs["maximumCaptureDuration"] = args ? args.maximumCaptureDuration : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkWatcherName"] = args ? args.networkWatcherName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["storageLocation"] = args ? args.storageLocation : undefined;
            inputs["targetResourceId"] = args ? args.targetResourceId : undefined;
        }
        super("azure:network/packetCapture:PacketCapture", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PacketCapture resources.
 */
export interface PacketCaptureState {
    readonly filters?: pulumi.Input<pulumi.Input<{ localIpAddress?: pulumi.Input<string>, localPort?: pulumi.Input<string>, protocol: pulumi.Input<string>, remoteIpAddress?: pulumi.Input<string>, remotePort?: pulumi.Input<string> }>[]>;
    readonly maximumBytesPerPacket?: pulumi.Input<number>;
    readonly maximumBytesPerSession?: pulumi.Input<number>;
    readonly maximumCaptureDuration?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly networkWatcherName?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly storageLocation?: pulumi.Input<{ filePath?: pulumi.Input<string>, storageAccountId?: pulumi.Input<string>, storagePath?: pulumi.Input<string> }>;
    readonly targetResourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PacketCapture resource.
 */
export interface PacketCaptureArgs {
    readonly filters?: pulumi.Input<pulumi.Input<{ localIpAddress?: pulumi.Input<string>, localPort?: pulumi.Input<string>, protocol: pulumi.Input<string>, remoteIpAddress?: pulumi.Input<string>, remotePort?: pulumi.Input<string> }>[]>;
    readonly maximumBytesPerPacket?: pulumi.Input<number>;
    readonly maximumBytesPerSession?: pulumi.Input<number>;
    readonly maximumCaptureDuration?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly networkWatcherName: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly storageLocation: pulumi.Input<{ filePath?: pulumi.Input<string>, storageAccountId?: pulumi.Input<string>, storagePath?: pulumi.Input<string> }>;
    readonly targetResourceId: pulumi.Input<string>;
}
