// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AlertRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertRuleState, opts?: pulumi.CustomResourceOptions): AlertRule {
        return new AlertRule(name, <any>state, { ...opts, id: id });
    }

    public readonly aggregation: pulumi.Output<string>;
    public readonly description: pulumi.Output<string>;
    public readonly emailAction: pulumi.Output<{ customEmails: string[], sendToServiceOwners: boolean }>;
    public readonly enabled: pulumi.Output<boolean | undefined>;
    public readonly location: pulumi.Output<string>;
    public readonly metricName: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly operator: pulumi.Output<string>;
    public readonly period: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly resourceId: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly threshold: pulumi.Output<number>;
    public readonly webhookAction: pulumi.Output<{ properties: {[key: string]: string}, serviceUri: string }>;

    /**
     * Create a AlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertRuleArgs | AlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AlertRuleState = argsOrState as AlertRuleState | undefined;
            inputs["aggregation"] = state ? state.aggregation : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["emailAction"] = state ? state.emailAction : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["metricName"] = state ? state.metricName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["operator"] = state ? state.operator : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["threshold"] = state ? state.threshold : undefined;
            inputs["webhookAction"] = state ? state.webhookAction : undefined;
        } else {
            const args = argsOrState as AlertRuleArgs | undefined;
            if (!args || args.aggregation === undefined) {
                throw new Error("Missing required property 'aggregation'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.metricName === undefined) {
                throw new Error("Missing required property 'metricName'");
            }
            if (!args || args.operator === undefined) {
                throw new Error("Missing required property 'operator'");
            }
            if (!args || args.period === undefined) {
                throw new Error("Missing required property 'period'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.resourceId === undefined) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (!args || args.threshold === undefined) {
                throw new Error("Missing required property 'threshold'");
            }
            inputs["aggregation"] = args ? args.aggregation : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["emailAction"] = args ? args.emailAction : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["metricName"] = args ? args.metricName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["operator"] = args ? args.operator : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["threshold"] = args ? args.threshold : undefined;
            inputs["webhookAction"] = args ? args.webhookAction : undefined;
        }
        super("azure:monitoring/alertRule:AlertRule", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertRule resources.
 */
export interface AlertRuleState {
    readonly aggregation?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly emailAction?: pulumi.Input<{ customEmails?: pulumi.Input<pulumi.Input<string>[]>, sendToServiceOwners?: pulumi.Input<boolean> }>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    readonly metricName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly operator?: pulumi.Input<string>;
    readonly period?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly resourceId?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly threshold?: pulumi.Input<number>;
    readonly webhookAction?: pulumi.Input<{ properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, serviceUri: pulumi.Input<string> }>;
}

/**
 * The set of arguments for constructing a AlertRule resource.
 */
export interface AlertRuleArgs {
    readonly aggregation: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly emailAction?: pulumi.Input<{ customEmails?: pulumi.Input<pulumi.Input<string>[]>, sendToServiceOwners?: pulumi.Input<boolean> }>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly location: pulumi.Input<string>;
    readonly metricName: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly operator: pulumi.Input<string>;
    readonly period: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly resourceId: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly threshold: pulumi.Input<number>;
    readonly webhookAction?: pulumi.Input<{ properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>, serviceUri: pulumi.Input<string> }>;
}
