// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountState, opts?: pulumi.CustomResourceOptions): Account {
        return new Account(name, <any>state, { ...opts, id: id });
    }

    public readonly accessTier: pulumi.Output<string>;
    public readonly accountEncryptionSource: pulumi.Output<string | undefined>;
    public readonly accountKind: pulumi.Output<string | undefined>;
    public readonly accountReplicationType: pulumi.Output<string>;
    public readonly accountTier: pulumi.Output<string>;
    public readonly accountType: pulumi.Output<string>;
    public readonly customDomain: pulumi.Output<{ name: string, useSubdomain?: boolean } | undefined>;
    public readonly enableBlobEncryption: pulumi.Output<boolean | undefined>;
    public readonly enableFileEncryption: pulumi.Output<boolean | undefined>;
    public readonly enableHttpsTrafficOnly: pulumi.Output<boolean | undefined>;
    public readonly identity: pulumi.Output<{ principalId: string, tenantId: string, type: string }>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly networkRules: pulumi.Output<{ bypasses: string[], ipRules?: string[], virtualNetworkSubnetIds?: string[] } | undefined>;
    public /*out*/ readonly primaryAccessKey: pulumi.Output<string>;
    public /*out*/ readonly primaryBlobConnectionString: pulumi.Output<string>;
    public /*out*/ readonly primaryBlobEndpoint: pulumi.Output<string>;
    public /*out*/ readonly primaryConnectionString: pulumi.Output<string>;
    public /*out*/ readonly primaryFileEndpoint: pulumi.Output<string>;
    public /*out*/ readonly primaryLocation: pulumi.Output<string>;
    public /*out*/ readonly primaryQueueEndpoint: pulumi.Output<string>;
    public /*out*/ readonly primaryTableEndpoint: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey: pulumi.Output<string>;
    public /*out*/ readonly secondaryBlobConnectionString: pulumi.Output<string>;
    public /*out*/ readonly secondaryBlobEndpoint: pulumi.Output<string>;
    public /*out*/ readonly secondaryConnectionString: pulumi.Output<string>;
    public /*out*/ readonly secondaryLocation: pulumi.Output<string>;
    public /*out*/ readonly secondaryQueueEndpoint: pulumi.Output<string>;
    public /*out*/ readonly secondaryTableEndpoint: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;

    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountArgs | AccountState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AccountState = argsOrState as AccountState | undefined;
            inputs["accessTier"] = state ? state.accessTier : undefined;
            inputs["accountEncryptionSource"] = state ? state.accountEncryptionSource : undefined;
            inputs["accountKind"] = state ? state.accountKind : undefined;
            inputs["accountReplicationType"] = state ? state.accountReplicationType : undefined;
            inputs["accountTier"] = state ? state.accountTier : undefined;
            inputs["accountType"] = state ? state.accountType : undefined;
            inputs["customDomain"] = state ? state.customDomain : undefined;
            inputs["enableBlobEncryption"] = state ? state.enableBlobEncryption : undefined;
            inputs["enableFileEncryption"] = state ? state.enableFileEncryption : undefined;
            inputs["enableHttpsTrafficOnly"] = state ? state.enableHttpsTrafficOnly : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkRules"] = state ? state.networkRules : undefined;
            inputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            inputs["primaryBlobConnectionString"] = state ? state.primaryBlobConnectionString : undefined;
            inputs["primaryBlobEndpoint"] = state ? state.primaryBlobEndpoint : undefined;
            inputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            inputs["primaryFileEndpoint"] = state ? state.primaryFileEndpoint : undefined;
            inputs["primaryLocation"] = state ? state.primaryLocation : undefined;
            inputs["primaryQueueEndpoint"] = state ? state.primaryQueueEndpoint : undefined;
            inputs["primaryTableEndpoint"] = state ? state.primaryTableEndpoint : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            inputs["secondaryBlobConnectionString"] = state ? state.secondaryBlobConnectionString : undefined;
            inputs["secondaryBlobEndpoint"] = state ? state.secondaryBlobEndpoint : undefined;
            inputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            inputs["secondaryLocation"] = state ? state.secondaryLocation : undefined;
            inputs["secondaryQueueEndpoint"] = state ? state.secondaryQueueEndpoint : undefined;
            inputs["secondaryTableEndpoint"] = state ? state.secondaryTableEndpoint : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AccountArgs | undefined;
            if (!args || args.accountReplicationType === undefined) {
                throw new Error("Missing required property 'accountReplicationType'");
            }
            if (!args || args.accountTier === undefined) {
                throw new Error("Missing required property 'accountTier'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accessTier"] = args ? args.accessTier : undefined;
            inputs["accountEncryptionSource"] = args ? args.accountEncryptionSource : undefined;
            inputs["accountKind"] = args ? args.accountKind : undefined;
            inputs["accountReplicationType"] = args ? args.accountReplicationType : undefined;
            inputs["accountTier"] = args ? args.accountTier : undefined;
            inputs["accountType"] = args ? args.accountType : undefined;
            inputs["customDomain"] = args ? args.customDomain : undefined;
            inputs["enableBlobEncryption"] = args ? args.enableBlobEncryption : undefined;
            inputs["enableFileEncryption"] = args ? args.enableFileEncryption : undefined;
            inputs["enableHttpsTrafficOnly"] = args ? args.enableHttpsTrafficOnly : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkRules"] = args ? args.networkRules : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["primaryAccessKey"] = undefined /*out*/;
            inputs["primaryBlobConnectionString"] = undefined /*out*/;
            inputs["primaryBlobEndpoint"] = undefined /*out*/;
            inputs["primaryConnectionString"] = undefined /*out*/;
            inputs["primaryFileEndpoint"] = undefined /*out*/;
            inputs["primaryLocation"] = undefined /*out*/;
            inputs["primaryQueueEndpoint"] = undefined /*out*/;
            inputs["primaryTableEndpoint"] = undefined /*out*/;
            inputs["secondaryAccessKey"] = undefined /*out*/;
            inputs["secondaryBlobConnectionString"] = undefined /*out*/;
            inputs["secondaryBlobEndpoint"] = undefined /*out*/;
            inputs["secondaryConnectionString"] = undefined /*out*/;
            inputs["secondaryLocation"] = undefined /*out*/;
            inputs["secondaryQueueEndpoint"] = undefined /*out*/;
            inputs["secondaryTableEndpoint"] = undefined /*out*/;
        }
        super("azure:storage/account:Account", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Account resources.
 */
export interface AccountState {
    readonly accessTier?: pulumi.Input<string>;
    readonly accountEncryptionSource?: pulumi.Input<string>;
    readonly accountKind?: pulumi.Input<string>;
    readonly accountReplicationType?: pulumi.Input<string>;
    readonly accountTier?: pulumi.Input<string>;
    readonly accountType?: pulumi.Input<string>;
    readonly customDomain?: pulumi.Input<{ name: pulumi.Input<string>, useSubdomain?: pulumi.Input<boolean> }>;
    readonly enableBlobEncryption?: pulumi.Input<boolean>;
    readonly enableFileEncryption?: pulumi.Input<boolean>;
    readonly enableHttpsTrafficOnly?: pulumi.Input<boolean>;
    readonly identity?: pulumi.Input<{ principalId?: pulumi.Input<string>, tenantId?: pulumi.Input<string>, type: pulumi.Input<string> }>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkRules?: pulumi.Input<{ bypasses?: pulumi.Input<pulumi.Input<string>[]>, ipRules?: pulumi.Input<pulumi.Input<string>[]>, virtualNetworkSubnetIds?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly primaryAccessKey?: pulumi.Input<string>;
    readonly primaryBlobConnectionString?: pulumi.Input<string>;
    readonly primaryBlobEndpoint?: pulumi.Input<string>;
    readonly primaryConnectionString?: pulumi.Input<string>;
    readonly primaryFileEndpoint?: pulumi.Input<string>;
    readonly primaryLocation?: pulumi.Input<string>;
    readonly primaryQueueEndpoint?: pulumi.Input<string>;
    readonly primaryTableEndpoint?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly secondaryAccessKey?: pulumi.Input<string>;
    readonly secondaryBlobConnectionString?: pulumi.Input<string>;
    readonly secondaryBlobEndpoint?: pulumi.Input<string>;
    readonly secondaryConnectionString?: pulumi.Input<string>;
    readonly secondaryLocation?: pulumi.Input<string>;
    readonly secondaryQueueEndpoint?: pulumi.Input<string>;
    readonly secondaryTableEndpoint?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Account resource.
 */
export interface AccountArgs {
    readonly accessTier?: pulumi.Input<string>;
    readonly accountEncryptionSource?: pulumi.Input<string>;
    readonly accountKind?: pulumi.Input<string>;
    readonly accountReplicationType: pulumi.Input<string>;
    readonly accountTier: pulumi.Input<string>;
    readonly accountType?: pulumi.Input<string>;
    readonly customDomain?: pulumi.Input<{ name: pulumi.Input<string>, useSubdomain?: pulumi.Input<boolean> }>;
    readonly enableBlobEncryption?: pulumi.Input<boolean>;
    readonly enableFileEncryption?: pulumi.Input<boolean>;
    readonly enableHttpsTrafficOnly?: pulumi.Input<boolean>;
    readonly identity?: pulumi.Input<{ principalId?: pulumi.Input<string>, tenantId?: pulumi.Input<string>, type: pulumi.Input<string> }>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkRules?: pulumi.Input<{ bypasses?: pulumi.Input<pulumi.Input<string>[]>, ipRules?: pulumi.Input<pulumi.Input<string>[]>, virtualNetworkSubnetIds?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
