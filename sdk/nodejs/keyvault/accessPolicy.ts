// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPolicyState, opts?: pulumi.CustomResourceOptions): AccessPolicy {
        return new AccessPolicy(name, <any>state, { ...opts, id: id });
    }

    public readonly applicationId: pulumi.Output<string | undefined>;
    public readonly certificatePermissions: pulumi.Output<string[] | undefined>;
    public readonly keyPermissions: pulumi.Output<string[] | undefined>;
    public readonly objectId: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly secretPermissions: pulumi.Output<string[] | undefined>;
    public readonly tenantId: pulumi.Output<string>;
    public readonly vaultName: pulumi.Output<string>;

    /**
     * Create a AccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessPolicyArgs | AccessPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AccessPolicyState = argsOrState as AccessPolicyState | undefined;
            inputs["applicationId"] = state ? state.applicationId : undefined;
            inputs["certificatePermissions"] = state ? state.certificatePermissions : undefined;
            inputs["keyPermissions"] = state ? state.keyPermissions : undefined;
            inputs["objectId"] = state ? state.objectId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["secretPermissions"] = state ? state.secretPermissions : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
            inputs["vaultName"] = state ? state.vaultName : undefined;
        } else {
            const args = argsOrState as AccessPolicyArgs | undefined;
            if (!args || args.objectId === undefined) {
                throw new Error("Missing required property 'objectId'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.tenantId === undefined) {
                throw new Error("Missing required property 'tenantId'");
            }
            if (!args || args.vaultName === undefined) {
                throw new Error("Missing required property 'vaultName'");
            }
            inputs["applicationId"] = args ? args.applicationId : undefined;
            inputs["certificatePermissions"] = args ? args.certificatePermissions : undefined;
            inputs["keyPermissions"] = args ? args.keyPermissions : undefined;
            inputs["objectId"] = args ? args.objectId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["secretPermissions"] = args ? args.secretPermissions : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["vaultName"] = args ? args.vaultName : undefined;
        }
        super("azure:keyvault/accessPolicy:AccessPolicy", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessPolicy resources.
 */
export interface AccessPolicyState {
    readonly applicationId?: pulumi.Input<string>;
    readonly certificatePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly keyPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly objectId?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly secretPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tenantId?: pulumi.Input<string>;
    readonly vaultName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessPolicy resource.
 */
export interface AccessPolicyArgs {
    readonly applicationId?: pulumi.Input<string>;
    readonly certificatePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly keyPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly objectId: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly secretPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tenantId: pulumi.Input<string>;
    readonly vaultName: pulumi.Input<string>;
}
