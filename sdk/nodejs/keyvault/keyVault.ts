// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class KeyVault extends pulumi.CustomResource {
    /**
     * Get an existing KeyVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyVaultState, opts?: pulumi.CustomResourceOptions): KeyVault {
        return new KeyVault(name, <any>state, { ...opts, id: id });
    }

    public readonly accessPolicies: pulumi.Output<{ applicationId?: string, certificatePermissions?: string[], keyPermissions?: string[], objectId: string, secretPermissions?: string[], tenantId: string }[]>;
    public readonly enabledForDeployment: pulumi.Output<boolean | undefined>;
    public readonly enabledForDiskEncryption: pulumi.Output<boolean | undefined>;
    public readonly enabledForTemplateDeployment: pulumi.Output<boolean | undefined>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly networkAcls: pulumi.Output<{ bypass: string, defaultAction: string, ipRules?: string[], virtualNetworkSubnetIds?: string[] } | undefined>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly sku: pulumi.Output<{ name: string }>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly tenantId: pulumi.Output<string>;
    public /*out*/ readonly vaultUri: pulumi.Output<string>;

    /**
     * Create a KeyVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyVaultArgs | KeyVaultState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: KeyVaultState = argsOrState as KeyVaultState | undefined;
            inputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            inputs["enabledForDeployment"] = state ? state.enabledForDeployment : undefined;
            inputs["enabledForDiskEncryption"] = state ? state.enabledForDiskEncryption : undefined;
            inputs["enabledForTemplateDeployment"] = state ? state.enabledForTemplateDeployment : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkAcls"] = state ? state.networkAcls : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
            inputs["vaultUri"] = state ? state.vaultUri : undefined;
        } else {
            const args = argsOrState as KeyVaultArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            if (!args || args.tenantId === undefined) {
                throw new Error("Missing required property 'tenantId'");
            }
            inputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            inputs["enabledForDeployment"] = args ? args.enabledForDeployment : undefined;
            inputs["enabledForDiskEncryption"] = args ? args.enabledForDiskEncryption : undefined;
            inputs["enabledForTemplateDeployment"] = args ? args.enabledForTemplateDeployment : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkAcls"] = args ? args.networkAcls : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["vaultUri"] = undefined /*out*/;
        }
        super("azure:keyvault/keyVault:KeyVault", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyVault resources.
 */
export interface KeyVaultState {
    readonly accessPolicies?: pulumi.Input<pulumi.Input<{ applicationId?: pulumi.Input<string>, certificatePermissions?: pulumi.Input<pulumi.Input<string>[]>, keyPermissions?: pulumi.Input<pulumi.Input<string>[]>, objectId: pulumi.Input<string>, secretPermissions?: pulumi.Input<pulumi.Input<string>[]>, tenantId: pulumi.Input<string> }>[]>;
    readonly enabledForDeployment?: pulumi.Input<boolean>;
    readonly enabledForDiskEncryption?: pulumi.Input<boolean>;
    readonly enabledForTemplateDeployment?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkAcls?: pulumi.Input<{ bypass: pulumi.Input<string>, defaultAction: pulumi.Input<string>, ipRules?: pulumi.Input<pulumi.Input<string>[]>, virtualNetworkSubnetIds?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly sku?: pulumi.Input<{ name: pulumi.Input<string> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tenantId?: pulumi.Input<string>;
    readonly vaultUri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyVault resource.
 */
export interface KeyVaultArgs {
    readonly accessPolicies?: pulumi.Input<pulumi.Input<{ applicationId?: pulumi.Input<string>, certificatePermissions?: pulumi.Input<pulumi.Input<string>[]>, keyPermissions?: pulumi.Input<pulumi.Input<string>[]>, objectId: pulumi.Input<string>, secretPermissions?: pulumi.Input<pulumi.Input<string>[]>, tenantId: pulumi.Input<string> }>[]>;
    readonly enabledForDeployment?: pulumi.Input<boolean>;
    readonly enabledForDiskEncryption?: pulumi.Input<boolean>;
    readonly enabledForTemplateDeployment?: pulumi.Input<boolean>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkAcls?: pulumi.Input<{ bypass: pulumi.Input<string>, defaultAction: pulumi.Input<string>, ipRules?: pulumi.Input<pulumi.Input<string>[]>, virtualNetworkSubnetIds?: pulumi.Input<pulumi.Input<string>[]> }>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly sku: pulumi.Input<{ name: pulumi.Input<string> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tenantId: pulumi.Input<string>;
}
