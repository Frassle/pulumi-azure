// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Plan extends pulumi.CustomResource {
    /**
     * Get an existing Plan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanState, opts?: pulumi.CustomResourceOptions): Plan {
        return new Plan(name, <any>state, { ...opts, id: id });
    }

    public readonly appServiceEnvironmentId: pulumi.Output<string>;
    public readonly kind: pulumi.Output<string | undefined>;
    public readonly location: pulumi.Output<string>;
    public /*out*/ readonly maximumNumberOfWorkers: pulumi.Output<number>;
    public readonly name: pulumi.Output<string>;
    public readonly perSiteScaling: pulumi.Output<boolean>;
    public readonly properties: pulumi.Output<{ appServiceEnvironmentId: string, perSiteScaling: boolean, reserved: boolean }>;
    public readonly reserved: pulumi.Output<boolean>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly sku: pulumi.Output<{ capacity: number, size: string, tier: string }>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;

    /**
     * Create a Plan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanArgs | PlanState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: PlanState = argsOrState as PlanState | undefined;
            inputs["appServiceEnvironmentId"] = state ? state.appServiceEnvironmentId : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["maximumNumberOfWorkers"] = state ? state.maximumNumberOfWorkers : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["perSiteScaling"] = state ? state.perSiteScaling : undefined;
            inputs["properties"] = state ? state.properties : undefined;
            inputs["reserved"] = state ? state.reserved : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PlanArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sku === undefined) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["appServiceEnvironmentId"] = args ? args.appServiceEnvironmentId : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["perSiteScaling"] = args ? args.perSiteScaling : undefined;
            inputs["properties"] = args ? args.properties : undefined;
            inputs["reserved"] = args ? args.reserved : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["maximumNumberOfWorkers"] = undefined /*out*/;
        }
        super("azure:appservice/plan:Plan", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plan resources.
 */
export interface PlanState {
    readonly appServiceEnvironmentId?: pulumi.Input<string>;
    readonly kind?: pulumi.Input<string>;
    readonly location?: pulumi.Input<string>;
    readonly maximumNumberOfWorkers?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly perSiteScaling?: pulumi.Input<boolean>;
    readonly properties?: pulumi.Input<{ appServiceEnvironmentId?: pulumi.Input<string>, perSiteScaling?: pulumi.Input<boolean>, reserved?: pulumi.Input<boolean> }>;
    readonly reserved?: pulumi.Input<boolean>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly sku?: pulumi.Input<{ capacity?: pulumi.Input<number>, size: pulumi.Input<string>, tier: pulumi.Input<string> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Plan resource.
 */
export interface PlanArgs {
    readonly appServiceEnvironmentId?: pulumi.Input<string>;
    readonly kind?: pulumi.Input<string>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly perSiteScaling?: pulumi.Input<boolean>;
    readonly properties?: pulumi.Input<{ appServiceEnvironmentId?: pulumi.Input<string>, perSiteScaling?: pulumi.Input<boolean>, reserved?: pulumi.Input<boolean> }>;
    readonly reserved?: pulumi.Input<boolean>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly sku: pulumi.Input<{ capacity?: pulumi.Input<number>, size: pulumi.Input<string>, tier: pulumi.Input<string> }>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
