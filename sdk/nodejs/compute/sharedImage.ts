// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SharedImage extends pulumi.CustomResource {
    /**
     * Get an existing SharedImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedImageState, opts?: pulumi.CustomResourceOptions): SharedImage {
        return new SharedImage(name, <any>state, { ...opts, id: id });
    }

    public readonly description: pulumi.Output<string | undefined>;
    public readonly eula: pulumi.Output<string | undefined>;
    public readonly galleryName: pulumi.Output<string>;
    public readonly identifier: pulumi.Output<{ offer: string, publisher: string, sku: string }>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly osType: pulumi.Output<string>;
    public readonly privacyStatementUri: pulumi.Output<string | undefined>;
    public readonly releaseNoteUri: pulumi.Output<string | undefined>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;

    /**
     * Create a SharedImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedImageArgs | SharedImageState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: SharedImageState = argsOrState as SharedImageState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["eula"] = state ? state.eula : undefined;
            inputs["galleryName"] = state ? state.galleryName : undefined;
            inputs["identifier"] = state ? state.identifier : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["osType"] = state ? state.osType : undefined;
            inputs["privacyStatementUri"] = state ? state.privacyStatementUri : undefined;
            inputs["releaseNoteUri"] = state ? state.releaseNoteUri : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SharedImageArgs | undefined;
            if (!args || args.galleryName === undefined) {
                throw new Error("Missing required property 'galleryName'");
            }
            if (!args || args.identifier === undefined) {
                throw new Error("Missing required property 'identifier'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.osType === undefined) {
                throw new Error("Missing required property 'osType'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["eula"] = args ? args.eula : undefined;
            inputs["galleryName"] = args ? args.galleryName : undefined;
            inputs["identifier"] = args ? args.identifier : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["osType"] = args ? args.osType : undefined;
            inputs["privacyStatementUri"] = args ? args.privacyStatementUri : undefined;
            inputs["releaseNoteUri"] = args ? args.releaseNoteUri : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        super("azure:compute/sharedImage:SharedImage", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SharedImage resources.
 */
export interface SharedImageState {
    readonly description?: pulumi.Input<string>;
    readonly eula?: pulumi.Input<string>;
    readonly galleryName?: pulumi.Input<string>;
    readonly identifier?: pulumi.Input<{ offer: pulumi.Input<string>, publisher: pulumi.Input<string>, sku: pulumi.Input<string> }>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly osType?: pulumi.Input<string>;
    readonly privacyStatementUri?: pulumi.Input<string>;
    readonly releaseNoteUri?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a SharedImage resource.
 */
export interface SharedImageArgs {
    readonly description?: pulumi.Input<string>;
    readonly eula?: pulumi.Input<string>;
    readonly galleryName: pulumi.Input<string>;
    readonly identifier: pulumi.Input<{ offer: pulumi.Input<string>, publisher: pulumi.Input<string>, sku: pulumi.Input<string> }>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly osType: pulumi.Input<string>;
    readonly privacyStatementUri?: pulumi.Input<string>;
    readonly releaseNoteUri?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
