// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Extension extends pulumi.CustomResource {
    /**
     * Get an existing Extension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtensionState, opts?: pulumi.CustomResourceOptions): Extension {
        return new Extension(name, <any>state, { ...opts, id: id });
    }

    public readonly autoUpgradeMinorVersion: pulumi.Output<boolean | undefined>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly protectedSettings: pulumi.Output<string | undefined>;
    public readonly publisher: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly settings: pulumi.Output<string | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly type: pulumi.Output<string>;
    public readonly typeHandlerVersion: pulumi.Output<string>;
    public readonly virtualMachineName: pulumi.Output<string>;

    /**
     * Create a Extension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtensionArgs | ExtensionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ExtensionState = argsOrState as ExtensionState | undefined;
            inputs["autoUpgradeMinorVersion"] = state ? state.autoUpgradeMinorVersion : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["protectedSettings"] = state ? state.protectedSettings : undefined;
            inputs["publisher"] = state ? state.publisher : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["settings"] = state ? state.settings : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["typeHandlerVersion"] = state ? state.typeHandlerVersion : undefined;
            inputs["virtualMachineName"] = state ? state.virtualMachineName : undefined;
        } else {
            const args = argsOrState as ExtensionArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.publisher === undefined) {
                throw new Error("Missing required property 'publisher'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            if (!args || args.typeHandlerVersion === undefined) {
                throw new Error("Missing required property 'typeHandlerVersion'");
            }
            if (!args || args.virtualMachineName === undefined) {
                throw new Error("Missing required property 'virtualMachineName'");
            }
            inputs["autoUpgradeMinorVersion"] = args ? args.autoUpgradeMinorVersion : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["protectedSettings"] = args ? args.protectedSettings : undefined;
            inputs["publisher"] = args ? args.publisher : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["settings"] = args ? args.settings : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["typeHandlerVersion"] = args ? args.typeHandlerVersion : undefined;
            inputs["virtualMachineName"] = args ? args.virtualMachineName : undefined;
        }
        super("azure:compute/extension:Extension", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Extension resources.
 */
export interface ExtensionState {
    readonly autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly protectedSettings?: pulumi.Input<string>;
    readonly publisher?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly settings?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly type?: pulumi.Input<string>;
    readonly typeHandlerVersion?: pulumi.Input<string>;
    readonly virtualMachineName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Extension resource.
 */
export interface ExtensionArgs {
    readonly autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly protectedSettings?: pulumi.Input<string>;
    readonly publisher: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly settings?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly type: pulumi.Input<string>;
    readonly typeHandlerVersion: pulumi.Input<string>;
    readonly virtualMachineName: pulumi.Input<string>;
}
