// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    public readonly description: pulumi.Output<string | undefined>;
    public readonly evaluatorType: pulumi.Output<string>;
    public readonly factData: pulumi.Output<string | undefined>;
    public readonly labName: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly policySetName: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly threshold: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: PolicyState = argsOrState as PolicyState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["evaluatorType"] = state ? state.evaluatorType : undefined;
            inputs["factData"] = state ? state.factData : undefined;
            inputs["labName"] = state ? state.labName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policySetName"] = state ? state.policySetName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["threshold"] = state ? state.threshold : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if (!args || args.evaluatorType === undefined) {
                throw new Error("Missing required property 'evaluatorType'");
            }
            if (!args || args.labName === undefined) {
                throw new Error("Missing required property 'labName'");
            }
            if (!args || args.policySetName === undefined) {
                throw new Error("Missing required property 'policySetName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.threshold === undefined) {
                throw new Error("Missing required property 'threshold'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["evaluatorType"] = args ? args.evaluatorType : undefined;
            inputs["factData"] = args ? args.factData : undefined;
            inputs["labName"] = args ? args.labName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policySetName"] = args ? args.policySetName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["threshold"] = args ? args.threshold : undefined;
        }
        super("azure:devtest/policy:Policy", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    readonly description?: pulumi.Input<string>;
    readonly evaluatorType?: pulumi.Input<string>;
    readonly factData?: pulumi.Input<string>;
    readonly labName?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly policySetName?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly threshold?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    readonly description?: pulumi.Input<string>;
    readonly evaluatorType: pulumi.Input<string>;
    readonly factData?: pulumi.Input<string>;
    readonly labName: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly policySetName: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly threshold: pulumi.Input<string>;
}
