// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class LinuxVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing LinuxVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinuxVirtualMachineState, opts?: pulumi.CustomResourceOptions): LinuxVirtualMachine {
        return new LinuxVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    public readonly allowClaim: pulumi.Output<boolean | undefined>;
    public readonly disallowPublicIpAddress: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly fqdn: pulumi.Output<string>;
    public readonly galleryImageReference: pulumi.Output<{ offer: string, publisher: string, sku: string, version: string }>;
    public readonly inboundNatRules: pulumi.Output<{ backendPort: number, frontendPort: number, protocol: string }[] | undefined>;
    public readonly labName: pulumi.Output<string>;
    public readonly labSubnetName: pulumi.Output<string>;
    public readonly labVirtualNetworkId: pulumi.Output<string>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly notes: pulumi.Output<string | undefined>;
    public readonly password: pulumi.Output<string | undefined>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly size: pulumi.Output<string>;
    public readonly sshKey: pulumi.Output<string | undefined>;
    public readonly storageType: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly uniqueIdentifier: pulumi.Output<string>;
    public readonly username: pulumi.Output<string>;

    /**
     * Create a LinuxVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinuxVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinuxVirtualMachineArgs | LinuxVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: LinuxVirtualMachineState = argsOrState as LinuxVirtualMachineState | undefined;
            inputs["allowClaim"] = state ? state.allowClaim : undefined;
            inputs["disallowPublicIpAddress"] = state ? state.disallowPublicIpAddress : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["galleryImageReference"] = state ? state.galleryImageReference : undefined;
            inputs["inboundNatRules"] = state ? state.inboundNatRules : undefined;
            inputs["labName"] = state ? state.labName : undefined;
            inputs["labSubnetName"] = state ? state.labSubnetName : undefined;
            inputs["labVirtualNetworkId"] = state ? state.labVirtualNetworkId : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notes"] = state ? state.notes : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["sshKey"] = state ? state.sshKey : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uniqueIdentifier"] = state ? state.uniqueIdentifier : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as LinuxVirtualMachineArgs | undefined;
            if (!args || args.galleryImageReference === undefined) {
                throw new Error("Missing required property 'galleryImageReference'");
            }
            if (!args || args.labName === undefined) {
                throw new Error("Missing required property 'labName'");
            }
            if (!args || args.labSubnetName === undefined) {
                throw new Error("Missing required property 'labSubnetName'");
            }
            if (!args || args.labVirtualNetworkId === undefined) {
                throw new Error("Missing required property 'labVirtualNetworkId'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            if (!args || args.storageType === undefined) {
                throw new Error("Missing required property 'storageType'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["allowClaim"] = args ? args.allowClaim : undefined;
            inputs["disallowPublicIpAddress"] = args ? args.disallowPublicIpAddress : undefined;
            inputs["galleryImageReference"] = args ? args.galleryImageReference : undefined;
            inputs["inboundNatRules"] = args ? args.inboundNatRules : undefined;
            inputs["labName"] = args ? args.labName : undefined;
            inputs["labSubnetName"] = args ? args.labSubnetName : undefined;
            inputs["labVirtualNetworkId"] = args ? args.labVirtualNetworkId : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notes"] = args ? args.notes : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["sshKey"] = args ? args.sshKey : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["fqdn"] = undefined /*out*/;
            inputs["uniqueIdentifier"] = undefined /*out*/;
        }
        super("azure:devtest/linuxVirtualMachine:LinuxVirtualMachine", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LinuxVirtualMachine resources.
 */
export interface LinuxVirtualMachineState {
    readonly allowClaim?: pulumi.Input<boolean>;
    readonly disallowPublicIpAddress?: pulumi.Input<boolean>;
    readonly fqdn?: pulumi.Input<string>;
    readonly galleryImageReference?: pulumi.Input<{ offer: pulumi.Input<string>, publisher: pulumi.Input<string>, sku: pulumi.Input<string>, version: pulumi.Input<string> }>;
    readonly inboundNatRules?: pulumi.Input<pulumi.Input<{ backendPort: pulumi.Input<number>, frontendPort?: pulumi.Input<number>, protocol: pulumi.Input<string> }>[]>;
    readonly labName?: pulumi.Input<string>;
    readonly labSubnetName?: pulumi.Input<string>;
    readonly labVirtualNetworkId?: pulumi.Input<string>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly notes?: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly size?: pulumi.Input<string>;
    readonly sshKey?: pulumi.Input<string>;
    readonly storageType?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly uniqueIdentifier?: pulumi.Input<string>;
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LinuxVirtualMachine resource.
 */
export interface LinuxVirtualMachineArgs {
    readonly allowClaim?: pulumi.Input<boolean>;
    readonly disallowPublicIpAddress?: pulumi.Input<boolean>;
    readonly galleryImageReference: pulumi.Input<{ offer: pulumi.Input<string>, publisher: pulumi.Input<string>, sku: pulumi.Input<string>, version: pulumi.Input<string> }>;
    readonly inboundNatRules?: pulumi.Input<pulumi.Input<{ backendPort: pulumi.Input<number>, frontendPort?: pulumi.Input<number>, protocol: pulumi.Input<string> }>[]>;
    readonly labName: pulumi.Input<string>;
    readonly labSubnetName: pulumi.Input<string>;
    readonly labVirtualNetworkId: pulumi.Input<string>;
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly notes?: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly size: pulumi.Input<string>;
    readonly sshKey?: pulumi.Input<string>;
    readonly storageType: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly username: pulumi.Input<string>;
}
