// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Lab extends pulumi.CustomResource {
    /**
     * Get an existing Lab resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LabState, opts?: pulumi.CustomResourceOptions): Lab {
        return new Lab(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly artifactsStorageAccountId: pulumi.Output<string>;
    public /*out*/ readonly defaultPremiumStorageAccountId: pulumi.Output<string>;
    public /*out*/ readonly defaultStorageAccountId: pulumi.Output<string>;
    public /*out*/ readonly keyVaultId: pulumi.Output<string>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public /*out*/ readonly premiumDataDiskStorageAccountId: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly storageType: pulumi.Output<string | undefined>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly uniqueIdentifier: pulumi.Output<string>;

    /**
     * Create a Lab resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LabArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LabArgs | LabState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: LabState = argsOrState as LabState | undefined;
            inputs["artifactsStorageAccountId"] = state ? state.artifactsStorageAccountId : undefined;
            inputs["defaultPremiumStorageAccountId"] = state ? state.defaultPremiumStorageAccountId : undefined;
            inputs["defaultStorageAccountId"] = state ? state.defaultStorageAccountId : undefined;
            inputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["premiumDataDiskStorageAccountId"] = state ? state.premiumDataDiskStorageAccountId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uniqueIdentifier"] = state ? state.uniqueIdentifier : undefined;
        } else {
            const args = argsOrState as LabArgs | undefined;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["artifactsStorageAccountId"] = undefined /*out*/;
            inputs["defaultPremiumStorageAccountId"] = undefined /*out*/;
            inputs["defaultStorageAccountId"] = undefined /*out*/;
            inputs["keyVaultId"] = undefined /*out*/;
            inputs["premiumDataDiskStorageAccountId"] = undefined /*out*/;
            inputs["uniqueIdentifier"] = undefined /*out*/;
        }
        super("azure:devtest/lab:Lab", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Lab resources.
 */
export interface LabState {
    readonly artifactsStorageAccountId?: pulumi.Input<string>;
    readonly defaultPremiumStorageAccountId?: pulumi.Input<string>;
    readonly defaultStorageAccountId?: pulumi.Input<string>;
    readonly keyVaultId?: pulumi.Input<string>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly premiumDataDiskStorageAccountId?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly storageType?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly uniqueIdentifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lab resource.
 */
export interface LabArgs {
    readonly location: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly storageType?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
