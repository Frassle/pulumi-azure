// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly maxNumberOfRecordSets: pulumi.Output<number>;
    public readonly name: pulumi.Output<string>;
    public /*out*/ readonly nameServers: pulumi.Output<string[]>;
    public /*out*/ readonly numberOfRecordSets: pulumi.Output<number>;
    public readonly registrationVirtualNetworkIds: pulumi.Output<string[] | undefined>;
    public readonly resolutionVirtualNetworkIds: pulumi.Output<string[] | undefined>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly tags: pulumi.Output<{[key: string]: any}>;
    public readonly zoneType: pulumi.Output<string | undefined>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ZoneState = argsOrState as ZoneState | undefined;
            inputs["maxNumberOfRecordSets"] = state ? state.maxNumberOfRecordSets : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameServers"] = state ? state.nameServers : undefined;
            inputs["numberOfRecordSets"] = state ? state.numberOfRecordSets : undefined;
            inputs["registrationVirtualNetworkIds"] = state ? state.registrationVirtualNetworkIds : undefined;
            inputs["resolutionVirtualNetworkIds"] = state ? state.resolutionVirtualNetworkIds : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zoneType"] = state ? state.zoneType : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["registrationVirtualNetworkIds"] = args ? args.registrationVirtualNetworkIds : undefined;
            inputs["resolutionVirtualNetworkIds"] = args ? args.resolutionVirtualNetworkIds : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["zoneType"] = args ? args.zoneType : undefined;
            inputs["maxNumberOfRecordSets"] = undefined /*out*/;
            inputs["nameServers"] = undefined /*out*/;
            inputs["numberOfRecordSets"] = undefined /*out*/;
        }
        super("azure:dns/zone:Zone", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    readonly maxNumberOfRecordSets?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly numberOfRecordSets?: pulumi.Input<number>;
    readonly registrationVirtualNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly resolutionVirtualNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    readonly name?: pulumi.Input<string>;
    readonly registrationVirtualNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly resolutionVirtualNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly zoneType?: pulumi.Input<string>;
}
