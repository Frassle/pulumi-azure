// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AuthorizationRule extends pulumi.CustomResource {
    /**
     * Get an existing AuthorizationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizationRuleState, opts?: pulumi.CustomResourceOptions): AuthorizationRule {
        return new AuthorizationRule(name, <any>state, { ...opts, id: id });
    }

    public readonly listen: pulumi.Output<boolean | undefined>;
    public readonly manage: pulumi.Output<boolean | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly namespaceName: pulumi.Output<string>;
    public readonly notificationHubName: pulumi.Output<string>;
    public /*out*/ readonly primaryAccessKey: pulumi.Output<string>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey: pulumi.Output<string>;
    public readonly send: pulumi.Output<boolean | undefined>;

    /**
     * Create a AuthorizationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizationRuleArgs | AuthorizationRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AuthorizationRuleState = argsOrState as AuthorizationRuleState | undefined;
            inputs["listen"] = state ? state.listen : undefined;
            inputs["manage"] = state ? state.manage : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceName"] = state ? state.namespaceName : undefined;
            inputs["notificationHubName"] = state ? state.notificationHubName : undefined;
            inputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            inputs["send"] = state ? state.send : undefined;
        } else {
            const args = argsOrState as AuthorizationRuleArgs | undefined;
            if (!args || args.namespaceName === undefined) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if (!args || args.notificationHubName === undefined) {
                throw new Error("Missing required property 'notificationHubName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["listen"] = args ? args.listen : undefined;
            inputs["manage"] = args ? args.manage : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["notificationHubName"] = args ? args.notificationHubName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["send"] = args ? args.send : undefined;
            inputs["primaryAccessKey"] = undefined /*out*/;
            inputs["secondaryAccessKey"] = undefined /*out*/;
        }
        super("azure:notificationhub/authorizationRule:AuthorizationRule", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthorizationRule resources.
 */
export interface AuthorizationRuleState {
    readonly listen?: pulumi.Input<boolean>;
    readonly manage?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly namespaceName?: pulumi.Input<string>;
    readonly notificationHubName?: pulumi.Input<string>;
    readonly primaryAccessKey?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly secondaryAccessKey?: pulumi.Input<string>;
    readonly send?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AuthorizationRule resource.
 */
export interface AuthorizationRuleArgs {
    readonly listen?: pulumi.Input<boolean>;
    readonly manage?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly namespaceName: pulumi.Input<string>;
    readonly notificationHubName: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly send?: pulumi.Input<boolean>;
}
