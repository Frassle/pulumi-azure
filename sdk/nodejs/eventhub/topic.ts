// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    public readonly autoDeleteOnIdle: pulumi.Output<string>;
    public readonly defaultMessageTtl: pulumi.Output<string>;
    public readonly duplicateDetectionHistoryTimeWindow: pulumi.Output<string>;
    public readonly enableBatchedOperations: pulumi.Output<boolean | undefined>;
    public readonly enableExpress: pulumi.Output<boolean | undefined>;
    public readonly enableFilteringMessagesBeforePublishing: pulumi.Output<boolean | undefined>;
    public readonly enablePartitioning: pulumi.Output<boolean | undefined>;
    public readonly location: pulumi.Output<string | undefined>;
    public readonly maxSizeInMegabytes: pulumi.Output<number>;
    public readonly name: pulumi.Output<string>;
    public readonly namespaceName: pulumi.Output<string>;
    public readonly requiresDuplicateDetection: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName: pulumi.Output<string>;
    public readonly status: pulumi.Output<string | undefined>;
    public readonly supportOrdering: pulumi.Output<boolean | undefined>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TopicState = argsOrState as TopicState | undefined;
            inputs["autoDeleteOnIdle"] = state ? state.autoDeleteOnIdle : undefined;
            inputs["defaultMessageTtl"] = state ? state.defaultMessageTtl : undefined;
            inputs["duplicateDetectionHistoryTimeWindow"] = state ? state.duplicateDetectionHistoryTimeWindow : undefined;
            inputs["enableBatchedOperations"] = state ? state.enableBatchedOperations : undefined;
            inputs["enableExpress"] = state ? state.enableExpress : undefined;
            inputs["enableFilteringMessagesBeforePublishing"] = state ? state.enableFilteringMessagesBeforePublishing : undefined;
            inputs["enablePartitioning"] = state ? state.enablePartitioning : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["maxSizeInMegabytes"] = state ? state.maxSizeInMegabytes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceName"] = state ? state.namespaceName : undefined;
            inputs["requiresDuplicateDetection"] = state ? state.requiresDuplicateDetection : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["supportOrdering"] = state ? state.supportOrdering : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if (!args || args.namespaceName === undefined) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["autoDeleteOnIdle"] = args ? args.autoDeleteOnIdle : undefined;
            inputs["defaultMessageTtl"] = args ? args.defaultMessageTtl : undefined;
            inputs["duplicateDetectionHistoryTimeWindow"] = args ? args.duplicateDetectionHistoryTimeWindow : undefined;
            inputs["enableBatchedOperations"] = args ? args.enableBatchedOperations : undefined;
            inputs["enableExpress"] = args ? args.enableExpress : undefined;
            inputs["enableFilteringMessagesBeforePublishing"] = args ? args.enableFilteringMessagesBeforePublishing : undefined;
            inputs["enablePartitioning"] = args ? args.enablePartitioning : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maxSizeInMegabytes"] = args ? args.maxSizeInMegabytes : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["requiresDuplicateDetection"] = args ? args.requiresDuplicateDetection : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["supportOrdering"] = args ? args.supportOrdering : undefined;
        }
        super("azure:eventhub/topic:Topic", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    readonly autoDeleteOnIdle?: pulumi.Input<string>;
    readonly defaultMessageTtl?: pulumi.Input<string>;
    readonly duplicateDetectionHistoryTimeWindow?: pulumi.Input<string>;
    readonly enableBatchedOperations?: pulumi.Input<boolean>;
    readonly enableExpress?: pulumi.Input<boolean>;
    readonly enableFilteringMessagesBeforePublishing?: pulumi.Input<boolean>;
    readonly enablePartitioning?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    readonly maxSizeInMegabytes?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly namespaceName?: pulumi.Input<string>;
    readonly requiresDuplicateDetection?: pulumi.Input<boolean>;
    readonly resourceGroupName?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly supportOrdering?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    readonly autoDeleteOnIdle?: pulumi.Input<string>;
    readonly defaultMessageTtl?: pulumi.Input<string>;
    readonly duplicateDetectionHistoryTimeWindow?: pulumi.Input<string>;
    readonly enableBatchedOperations?: pulumi.Input<boolean>;
    readonly enableExpress?: pulumi.Input<boolean>;
    readonly enableFilteringMessagesBeforePublishing?: pulumi.Input<boolean>;
    readonly enablePartitioning?: pulumi.Input<boolean>;
    readonly location?: pulumi.Input<string>;
    readonly maxSizeInMegabytes?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly namespaceName: pulumi.Input<string>;
    readonly requiresDuplicateDetection?: pulumi.Input<boolean>;
    readonly resourceGroupName: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly supportOrdering?: pulumi.Input<boolean>;
}
