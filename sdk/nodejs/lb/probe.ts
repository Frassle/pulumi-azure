// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Probe extends pulumi.CustomResource {
    /**
     * Get an existing Probe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbeState, opts?: pulumi.CustomResourceOptions): Probe {
        return new Probe(name, <any>state, { ...opts, id: id });
    }

    public readonly intervalInSeconds: pulumi.Output<number | undefined>;
    public /*out*/ readonly loadBalancerRules: pulumi.Output<string[]>;
    public readonly loadbalancerId: pulumi.Output<string>;
    public readonly location: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly numberOfProbes: pulumi.Output<number | undefined>;
    public readonly port: pulumi.Output<number>;
    public readonly protocol: pulumi.Output<string>;
    public readonly requestPath: pulumi.Output<string | undefined>;
    public readonly resourceGroupName: pulumi.Output<string>;

    /**
     * Create a Probe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProbeArgs | ProbeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ProbeState = argsOrState as ProbeState | undefined;
            inputs["intervalInSeconds"] = state ? state.intervalInSeconds : undefined;
            inputs["loadBalancerRules"] = state ? state.loadBalancerRules : undefined;
            inputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["numberOfProbes"] = state ? state.numberOfProbes : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["requestPath"] = state ? state.requestPath : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as ProbeArgs | undefined;
            if (!args || args.loadbalancerId === undefined) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if (!args || args.port === undefined) {
                throw new Error("Missing required property 'port'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["intervalInSeconds"] = args ? args.intervalInSeconds : undefined;
            inputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["numberOfProbes"] = args ? args.numberOfProbes : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["requestPath"] = args ? args.requestPath : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["loadBalancerRules"] = undefined /*out*/;
        }
        super("azure:lb/probe:Probe", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Probe resources.
 */
export interface ProbeState {
    readonly intervalInSeconds?: pulumi.Input<number>;
    readonly loadBalancerRules?: pulumi.Input<pulumi.Input<string>[]>;
    readonly loadbalancerId?: pulumi.Input<string>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly numberOfProbes?: pulumi.Input<number>;
    readonly port?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<string>;
    readonly requestPath?: pulumi.Input<string>;
    readonly resourceGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Probe resource.
 */
export interface ProbeArgs {
    readonly intervalInSeconds?: pulumi.Input<number>;
    readonly loadbalancerId: pulumi.Input<string>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly numberOfProbes?: pulumi.Input<number>;
    readonly port: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<string>;
    readonly requestPath?: pulumi.Input<string>;
    readonly resourceGroupName: pulumi.Input<string>;
}
