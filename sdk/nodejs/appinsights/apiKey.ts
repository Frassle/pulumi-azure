// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyState, opts?: pulumi.CustomResourceOptions): ApiKey {
        return new ApiKey(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly apiKey: pulumi.Output<string>;
    public readonly applicationInsightsId: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly readPermissions: pulumi.Output<string[] | undefined>;
    public readonly writePermissions: pulumi.Output<string[] | undefined>;

    /**
     * Create a ApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiKeyArgs | ApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ApiKeyState = argsOrState as ApiKeyState | undefined;
            inputs["apiKey"] = state ? state.apiKey : undefined;
            inputs["applicationInsightsId"] = state ? state.applicationInsightsId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["readPermissions"] = state ? state.readPermissions : undefined;
            inputs["writePermissions"] = state ? state.writePermissions : undefined;
        } else {
            const args = argsOrState as ApiKeyArgs | undefined;
            if (!args || args.applicationInsightsId === undefined) {
                throw new Error("Missing required property 'applicationInsightsId'");
            }
            inputs["applicationInsightsId"] = args ? args.applicationInsightsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["readPermissions"] = args ? args.readPermissions : undefined;
            inputs["writePermissions"] = args ? args.writePermissions : undefined;
            inputs["apiKey"] = undefined /*out*/;
        }
        super("azure:appinsights/apiKey:ApiKey", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiKey resources.
 */
export interface ApiKeyState {
    readonly apiKey?: pulumi.Input<string>;
    readonly applicationInsightsId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly readPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly writePermissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApiKey resource.
 */
export interface ApiKeyArgs {
    readonly applicationInsightsId: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly readPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly writePermissions?: pulumi.Input<pulumi.Input<string>[]>;
}
