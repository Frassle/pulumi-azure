// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Trafficmanager {

	public sealed class ProfileArgsDnsConfig : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> RelativeName { get; set; }
		public Pulumi.IO<int> Ttl { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("relative_name", Protobuf.ToProtobuf(RelativeName)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("ttl", Protobuf.ToProtobuf(Ttl)));
		} // ToProtobuf

	} // ProfileArgsDnsConfig

	public sealed class ProfileArgsMonitorConfig : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> Path { get; set; }
		public Pulumi.IO<int> Port { get; set; }
		public Pulumi.IO<string> Protocol { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("path", Protobuf.ToProtobuf(Path)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("port", Protobuf.ToProtobuf(Port)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("protocol", Protobuf.ToProtobuf(Protocol)));
		} // ToProtobuf

	} // ProfileArgsMonitorConfig

	public sealed class ProfileDnsConfig : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> RelativeName { get; set; }
		public Pulumi.IO<int> Ttl { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("relative_name", Protobuf.ToProtobuf(RelativeName)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("ttl", Protobuf.ToProtobuf(Ttl)));
		} // ToProtobuf

		public static ProfileDnsConfig FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new ProfileDnsConfig();
				if (obj.Fields.ContainsKey("relative_name")) {
					result.RelativeName = Protobuf.ToString(obj.Fields["relative_name"]);
				}
				if (obj.Fields.ContainsKey("ttl")) {
					result.Ttl = Protobuf.ToInt(obj.Fields["ttl"]);
				}
			return result;
		} // FromProtobuf

	} // ProfileDnsConfig

	public sealed class ProfileMonitorConfig : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> Path { get; set; }
		public Pulumi.IO<int> Port { get; set; }
		public Pulumi.IO<string> Protocol { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("path", Protobuf.ToProtobuf(Path)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("port", Protobuf.ToProtobuf(Port)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("protocol", Protobuf.ToProtobuf(Protocol)));
		} // ToProtobuf

		public static ProfileMonitorConfig FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new ProfileMonitorConfig();
				if (obj.Fields.ContainsKey("path")) {
					result.Path = Protobuf.ToString(obj.Fields["path"]);
				}
				if (obj.Fields.ContainsKey("port")) {
					result.Port = Protobuf.ToInt(obj.Fields["port"]);
				}
				if (obj.Fields.ContainsKey("protocol")) {
					result.Protocol = Protobuf.ToString(obj.Fields["protocol"]);
				}
			return result;
		} // FromProtobuf

	} // ProfileMonitorConfig

	/// <summary>
	/// The set of arguments for constructing a Profile resource.
	/// </summary>
	public struct ProfileArgs {
		/// <summary>
		/// This block specifies the DNS configuration of the
		/// Profile, it supports the fields documented below.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<ProfileArgsDnsConfig>[]> DnsConfigs { get; set; }

		/// <summary>
		/// This block specifies the Endpoint monitoring
		/// configuration for the Profile, it supports the fields documented below.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<ProfileArgsMonitorConfig>[]> MonitorConfigs { get; set; }

		/// <summary>
		/// The name of the virtual network. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The status of the profile, can be set to either
		/// `Enabled` or `Disabled`. Defaults to `Enabled`.
		/// </summary>
		public Pulumi.IO<string> ProfileStatus { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the virtual network.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// Specifies the algorithm used to route
		/// traffic, possible values are:
		/// - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
		/// - `Performance` - Traffic is routed via the User's closest Endpoint
		/// - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
		/// - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
		/// </summary>
		public Pulumi.IO<string> TrafficRoutingMethod { get; set; }

	} // ProfileArgs

	/// <summary>
	/// Manages a Traffic Manager Profile to which multiple endpoints can be attached.
	/// </summary>
	public class Profile : Pulumi.CustomResource {
		/// <summary>
		/// This block specifies the DNS configuration of the
		/// Profile, it supports the fields documented below.
		/// </summary>
		public Pulumi.IO<ProfileDnsConfig[]> DnsConfigs { get; set; }

		/// <summary>
		/// The FQDN of the created Profile.
		/// </summary>
		public Pulumi.IO<string> Fqdn { get; set; }

		/// <summary>
		/// This block specifies the Endpoint monitoring
		/// configuration for the Profile, it supports the fields documented below.
		/// </summary>
		public Pulumi.IO<ProfileMonitorConfig[]> MonitorConfigs { get; set; }

		/// <summary>
		/// The name of the virtual network. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The status of the profile, can be set to either
		/// `Enabled` or `Disabled`. Defaults to `Enabled`.
		/// </summary>
		public Pulumi.IO<string> ProfileStatus { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the virtual network.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// Specifies the algorithm used to route
		/// traffic, possible values are:
		/// - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
		/// - `Performance` - Traffic is routed via the User's closest Endpoint
		/// - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
		/// - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
		/// </summary>
		public Pulumi.IO<string> TrafficRoutingMethod { get; set; }

		public Profile(string name, ProfileArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:trafficmanager/profile:Profile", name, SerialiseArgs(args), opts) {
			DnsConfigs = base.Outputs["dnsConfigs"].Select(item => Protobuf.ToList(item, item1 => ProfileDnsConfig.FromProtobuf(item1)));
			Fqdn = base.Outputs["fqdn"].Select(item => Protobuf.ToString(item));
			MonitorConfigs = base.Outputs["monitorConfigs"].Select(item => Protobuf.ToList(item, item1 => ProfileMonitorConfig.FromProtobuf(item1)));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			ProfileStatus = base.Outputs["profileStatus"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			Tags = base.Outputs["tags"].Select(item => Protobuf.ToMap(item));
			TrafficRoutingMethod = base.Outputs["trafficRoutingMethod"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ProfileArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["dnsConfigs"] = Protobuf.ToProtobuf(args.DnsConfigs, item => Protobuf.ToProtobuf(item));
			props["monitorConfigs"] = Protobuf.ToProtobuf(args.MonitorConfigs, item => Protobuf.ToProtobuf(item));
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["profileStatus"] = Protobuf.ToProtobuf(args.ProfileStatus);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["tags"] = Protobuf.ToProtobuf(args.Tags);
			props["trafficRoutingMethod"] = Protobuf.ToProtobuf(args.TrafficRoutingMethod);
			props["fqdn"] = null; //out
			return props;
		} // SerialiseArgs

	} // Profile
} // Pulumi.Azure.Trafficmanager
