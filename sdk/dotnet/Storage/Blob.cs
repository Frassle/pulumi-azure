// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Storage {

	/// <summary>
	/// The set of arguments for constructing a Blob resource.
	/// </summary>
	public struct BlobArgs {
		/// <summary>
		/// The number of attempts to make per page or block when uploading. Defaults to `1`.
		/// </summary>
		public Pulumi.IO<int> Attempts { get; set; }

		/// <summary>
		/// The content type of the storage blob. Cannot be defined if `source_uri` is defined. Defaults to `application/octet-stream`.
		/// </summary>
		public Pulumi.IO<string> ContentType { get; set; }

		/// <summary>
		/// The name of the storage blob. Must be unique within the storage container the blob is located.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The number of workers per CPU core to run for concurrent uploads. Defaults to `8`.
		/// </summary>
		public Pulumi.IO<int> Parallelism { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the storage container. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Used only for `page` blobs to specify the size in bytes of the blob to be created. Must be a multiple of 512. Defaults to 0.
		/// </summary>
		public Pulumi.IO<int> Size { get; set; }

		/// <summary>
		/// An absolute path to a file on the local system. Cannot be defined if `source_uri` is defined.
		/// </summary>
		public Pulumi.IO<string> Source { get; set; }

		/// <summary>
		/// The URI of an existing blob, or a file in the Azure File service, to use as the source contents
		/// for the blob to be created. Changing this forces a new resource to be created. Cannot be defined if `source` is defined.
		/// </summary>
		public Pulumi.IO<string> SourceUri { get; set; }

		/// <summary>
		/// Specifies the storage account in which to create the storage container.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> StorageAccountName { get; set; }

		/// <summary>
		/// The name of the storage container in which this blob should be created.
		/// </summary>
		public Pulumi.IO<string> StorageContainerName { get; set; }

		/// <summary>
		/// The type of the storage blob to be created. One of either `block` or `page`. When not copying from an existing blob,
		/// this becomes required.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

	} // BlobArgs

	/// <summary>
	/// Manage an Azure Storage Blob.
	/// </summary>
	public class Blob : Pulumi.CustomResource {
		/// <summary>
		/// The number of attempts to make per page or block when uploading. Defaults to `1`.
		/// </summary>
		public Pulumi.IO<int> Attempts { get; set; }

		/// <summary>
		/// The content type of the storage blob. Cannot be defined if `source_uri` is defined. Defaults to `application/octet-stream`.
		/// </summary>
		public Pulumi.IO<string> ContentType { get; set; }

		/// <summary>
		/// The name of the storage blob. Must be unique within the storage container the blob is located.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The number of workers per CPU core to run for concurrent uploads. Defaults to `8`.
		/// </summary>
		public Pulumi.IO<int> Parallelism { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the storage container. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Used only for `page` blobs to specify the size in bytes of the blob to be created. Must be a multiple of 512. Defaults to 0.
		/// </summary>
		public Pulumi.IO<int> Size { get; set; }

		/// <summary>
		/// An absolute path to a file on the local system. Cannot be defined if `source_uri` is defined.
		/// </summary>
		public Pulumi.IO<string> Source { get; set; }

		/// <summary>
		/// The URI of an existing blob, or a file in the Azure File service, to use as the source contents
		/// for the blob to be created. Changing this forces a new resource to be created. Cannot be defined if `source` is defined.
		/// </summary>
		public Pulumi.IO<string> SourceUri { get; set; }

		/// <summary>
		/// Specifies the storage account in which to create the storage container.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> StorageAccountName { get; set; }

		/// <summary>
		/// The name of the storage container in which this blob should be created.
		/// </summary>
		public Pulumi.IO<string> StorageContainerName { get; set; }

		/// <summary>
		/// The type of the storage blob to be created. One of either `block` or `page`. When not copying from an existing blob,
		/// this becomes required.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// The URL of the blob
		/// </summary>
		public Pulumi.IO<string> Url { get; set; }

		public Blob(string name, BlobArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:storage/blob:Blob", name, SerialiseArgs(args), opts) {
			Attempts = base.Outputs["attempts"].Select(item => Protobuf.ToInt(item));
			ContentType = base.Outputs["contentType"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			Parallelism = base.Outputs["parallelism"].Select(item => Protobuf.ToInt(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			Size = base.Outputs["size"].Select(item => Protobuf.ToInt(item));
			Source = base.Outputs["source"].Select(item => Protobuf.ToString(item));
			SourceUri = base.Outputs["sourceUri"].Select(item => Protobuf.ToString(item));
			StorageAccountName = base.Outputs["storageAccountName"].Select(item => Protobuf.ToString(item));
			StorageContainerName = base.Outputs["storageContainerName"].Select(item => Protobuf.ToString(item));
			Type = base.Outputs["type"].Select(item => Protobuf.ToString(item));
			Url = base.Outputs["url"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(BlobArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["attempts"] = Protobuf.ToProtobuf(args.Attempts);
			props["contentType"] = Protobuf.ToProtobuf(args.ContentType);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["parallelism"] = Protobuf.ToProtobuf(args.Parallelism);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["size"] = Protobuf.ToProtobuf(args.Size);
			props["source"] = Protobuf.ToProtobuf(args.Source);
			props["sourceUri"] = Protobuf.ToProtobuf(args.SourceUri);
			props["storageAccountName"] = Protobuf.ToProtobuf(args.StorageAccountName);
			props["storageContainerName"] = Protobuf.ToProtobuf(args.StorageContainerName);
			props["type"] = Protobuf.ToProtobuf(args.Type);
			props["url"] = null; //out
			return props;
		} // SerialiseArgs

	} // Blob
} // Pulumi.Azure.Storage
