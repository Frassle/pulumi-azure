// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Core {

	/// <summary>
	/// The set of arguments for constructing a TemplateDeployment resource.
	/// </summary>
	public struct TemplateDeploymentArgs {
		/// <summary>
		/// Specifies the mode that is used to deploy resources. This value could be either `Incremental` or `Complete`.
		/// Note that you will almost *always* want this to be set to `Incremental` otherwise the deployment will destroy all infrastructure not
		/// specified within the template, and Terraform will not be aware of this.
		/// </summary>
		public Pulumi.IO<string> DeploymentMode { get; set; }

		/// <summary>
		/// Specifies the name of the template deployment. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// Specifies the name and value pairs that define the deployment parameters for the template.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Parameters { get; set; }

		/// <summary>
		/// Specifies a valid Azure JSON parameters file that define the deployment parameters. It can contain KeyVault references
		/// </summary>
		public Pulumi.IO<string> ParametersBody { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the template deployment.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Specifies the JSON definition for the template.
		/// </summary>
		public Pulumi.IO<string> TemplateBody { get; set; }

	} // TemplateDeploymentArgs

	/// <summary>
	/// Manage a template deployment of resources
	/// 
	/// > **Note on ARM Template Deployments:** Due to the way the underlying Azure API is designed, Terraform can only manage the deployment of the ARM Template - and not any resources which are created by it.
	/// This means that when deleting the `azurerm_template_deployment` resource, Terraform will only remove the reference to the deployment, whilst leaving any resources created by that ARM Template Deployment.
	/// One workaround for this is to use a unique Resource Group for each ARM Template Deployment, which means deleting the Resource Group would contain any resources created within it - however this isn't ideal. [More information](https://docs.microsoft.com/en-us/rest/api/resources/deployments#Deployments_Delete).
	/// </summary>
	public class TemplateDeployment : Pulumi.CustomResource {
		/// <summary>
		/// Specifies the mode that is used to deploy resources. This value could be either `Incremental` or `Complete`.
		/// Note that you will almost *always* want this to be set to `Incremental` otherwise the deployment will destroy all infrastructure not
		/// specified within the template, and Terraform will not be aware of this.
		/// </summary>
		public Pulumi.IO<string> DeploymentMode { get; set; }

		/// <summary>
		/// Specifies the name of the template deployment. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A map of supported scalar output types returned from the deployment (currently, Azure Template Deployment outputs of type String, Int and Bool are supported, and are converted to strings - others will be ignored) and can be accessed using `.outputs["name"]`.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Outputs { get; set; }

		/// <summary>
		/// Specifies the name and value pairs that define the deployment parameters for the template.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Parameters { get; set; }

		/// <summary>
		/// Specifies a valid Azure JSON parameters file that define the deployment parameters. It can contain KeyVault references
		/// </summary>
		public Pulumi.IO<string> ParametersBody { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the template deployment.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Specifies the JSON definition for the template.
		/// </summary>
		public Pulumi.IO<string> TemplateBody { get; set; }

		public TemplateDeployment(string name, TemplateDeploymentArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:core/templateDeployment:TemplateDeployment", name, SerialiseArgs(args), opts) {
			DeploymentMode = base.Outputs["deploymentMode"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			Outputs = base.Outputs["outputs"].Select(item => Protobuf.ToMap(item));
			Parameters = base.Outputs["parameters"].Select(item => Protobuf.ToMap(item));
			ParametersBody = base.Outputs["parametersBody"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			TemplateBody = base.Outputs["templateBody"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(TemplateDeploymentArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["deploymentMode"] = Protobuf.ToProtobuf(args.DeploymentMode);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["parameters"] = Protobuf.ToProtobuf(args.Parameters);
			props["parametersBody"] = Protobuf.ToProtobuf(args.ParametersBody);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["templateBody"] = Protobuf.ToProtobuf(args.TemplateBody);
			props["outputs"] = null; //out
			return props;
		} // SerialiseArgs

	} // TemplateDeployment
} // Pulumi.Azure.Core
