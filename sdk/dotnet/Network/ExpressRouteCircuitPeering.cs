// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Network {

	public sealed class ExpressRouteCircuitPeeringArgsMicrosoftPeeringConfig : Pulumi.IIOProtobuf {
		public Pulumi.IO<Pulumi.IO<string>[]> AdvertisedPublicPrefixes { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("advertised_public_prefixes", Protobuf.ToProtobuf(AdvertisedPublicPrefixes, item => Protobuf.ToProtobuf(item))));
		} // ToProtobuf

	} // ExpressRouteCircuitPeeringArgsMicrosoftPeeringConfig

	public sealed class ExpressRouteCircuitPeeringMicrosoftPeeringConfig : Pulumi.IIOProtobuf {
		public Pulumi.IO<string[]> AdvertisedPublicPrefixes { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("advertised_public_prefixes", Protobuf.ToProtobuf(AdvertisedPublicPrefixes, item => Protobuf.ToProtobuf(item))));
		} // ToProtobuf

		public static ExpressRouteCircuitPeeringMicrosoftPeeringConfig FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new ExpressRouteCircuitPeeringMicrosoftPeeringConfig();
				if (obj.Fields.ContainsKey("advertised_public_prefixes")) {
					result.AdvertisedPublicPrefixes = Protobuf.ToList(obj.Fields["advertised_public_prefixes"], item => Protobuf.ToString(item));
				}
			return result;
		} // FromProtobuf

	} // ExpressRouteCircuitPeeringMicrosoftPeeringConfig

	/// <summary>
	/// The set of arguments for constructing a ExpressRouteCircuitPeering resource.
	/// </summary>
	public struct ExpressRouteCircuitPeeringArgs {
		/// <summary>
		/// The name of the ExpressRoute Circuit in which to create the Peering.
		/// </summary>
		public Pulumi.IO<string> ExpressRouteCircuitName { get; set; }

		/// <summary>
		/// A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering`.
		/// </summary>
		public Pulumi.IO<ExpressRouteCircuitPeeringArgsMicrosoftPeeringConfig> MicrosoftPeeringConfig { get; set; }

		/// <summary>
		/// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
		/// </summary>
		public Pulumi.IO<int> PeerAsn { get; set; }

		/// <summary>
		/// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> PeeringType { get; set; }

		/// <summary>
		/// A `/30` subnet for the primary link.
		/// </summary>
		public Pulumi.IO<string> PrimaryPeerAddressPrefix { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A `/30` subnet for the secondary link.
		/// </summary>
		public Pulumi.IO<string> SecondaryPeerAddressPrefix { get; set; }

		/// <summary>
		/// The shared key. Can be a maximum of 25 characters.
		/// </summary>
		public Pulumi.IO<string> SharedKey { get; set; }

		/// <summary>
		/// A valid VLAN ID to establish this peering on.
		/// </summary>
		public Pulumi.IO<int> VlanId { get; set; }

	} // ExpressRouteCircuitPeeringArgs

	/// <summary>
	/// Manages an ExpressRoute Circuit Peering.
	/// </summary>
	public class ExpressRouteCircuitPeering : Pulumi.CustomResource {
		/// <summary>
		/// The ASN used by Azure.
		/// </summary>
		public Pulumi.IO<int> AzureAsn { get; set; }

		/// <summary>
		/// The name of the ExpressRoute Circuit in which to create the Peering.
		/// </summary>
		public Pulumi.IO<string> ExpressRouteCircuitName { get; set; }

		/// <summary>
		/// A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering`.
		/// </summary>
		public Pulumi.IO<ExpressRouteCircuitPeeringMicrosoftPeeringConfig> MicrosoftPeeringConfig { get; set; }

		/// <summary>
		/// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
		/// </summary>
		public Pulumi.IO<int> PeerAsn { get; set; }

		/// <summary>
		/// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> PeeringType { get; set; }

		/// <summary>
		/// The Primary Port used by Azure for this Peering.
		/// </summary>
		public Pulumi.IO<string> PrimaryAzurePort { get; set; }

		/// <summary>
		/// A `/30` subnet for the primary link.
		/// </summary>
		public Pulumi.IO<string> PrimaryPeerAddressPrefix { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// The Secondary Port used by Azure for this Peering.
		/// </summary>
		public Pulumi.IO<string> SecondaryAzurePort { get; set; }

		/// <summary>
		/// A `/30` subnet for the secondary link.
		/// </summary>
		public Pulumi.IO<string> SecondaryPeerAddressPrefix { get; set; }

		/// <summary>
		/// The shared key. Can be a maximum of 25 characters.
		/// </summary>
		public Pulumi.IO<string> SharedKey { get; set; }

		/// <summary>
		/// A valid VLAN ID to establish this peering on.
		/// </summary>
		public Pulumi.IO<int> VlanId { get; set; }

		public ExpressRouteCircuitPeering(string name, ExpressRouteCircuitPeeringArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, SerialiseArgs(args), opts) {
			AzureAsn = base.Outputs["azureAsn"].Select(item => Protobuf.ToInt(item));
			ExpressRouteCircuitName = base.Outputs["expressRouteCircuitName"].Select(item => Protobuf.ToString(item));
			MicrosoftPeeringConfig = base.Outputs["microsoftPeeringConfig"].Select(item => ExpressRouteCircuitPeeringMicrosoftPeeringConfig.FromProtobuf(item));
			PeerAsn = base.Outputs["peerAsn"].Select(item => Protobuf.ToInt(item));
			PeeringType = base.Outputs["peeringType"].Select(item => Protobuf.ToString(item));
			PrimaryAzurePort = base.Outputs["primaryAzurePort"].Select(item => Protobuf.ToString(item));
			PrimaryPeerAddressPrefix = base.Outputs["primaryPeerAddressPrefix"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			SecondaryAzurePort = base.Outputs["secondaryAzurePort"].Select(item => Protobuf.ToString(item));
			SecondaryPeerAddressPrefix = base.Outputs["secondaryPeerAddressPrefix"].Select(item => Protobuf.ToString(item));
			SharedKey = base.Outputs["sharedKey"].Select(item => Protobuf.ToString(item));
			VlanId = base.Outputs["vlanId"].Select(item => Protobuf.ToInt(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ExpressRouteCircuitPeeringArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["expressRouteCircuitName"] = Protobuf.ToProtobuf(args.ExpressRouteCircuitName);
			props["microsoftPeeringConfig"] = Protobuf.ToProtobuf(args.MicrosoftPeeringConfig);
			props["peerAsn"] = Protobuf.ToProtobuf(args.PeerAsn);
			props["peeringType"] = Protobuf.ToProtobuf(args.PeeringType);
			props["primaryPeerAddressPrefix"] = Protobuf.ToProtobuf(args.PrimaryPeerAddressPrefix);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["secondaryPeerAddressPrefix"] = Protobuf.ToProtobuf(args.SecondaryPeerAddressPrefix);
			props["sharedKey"] = Protobuf.ToProtobuf(args.SharedKey);
			props["vlanId"] = Protobuf.ToProtobuf(args.VlanId);
			props["azureAsn"] = null; //out
			props["primaryAzurePort"] = null; //out
			props["secondaryAzurePort"] = null; //out
			return props;
		} // SerialiseArgs

	} // ExpressRouteCircuitPeering
} // Pulumi.Azure.Network
