// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Network {

	/// <summary>
	/// A collection of arguments for invoking getSubnet.
	/// </summary>
	public struct GetSubnetArgs {
		/// <summary>
		/// Specifies the name of the Subnet.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// Specifies the name of the resource group the Virtual Network is located in.
		/// </summary>
		public string ResourceGroupName { get; set; }

		/// <summary>
		/// Specifies the name of the Virtual Network this Subnet is located within.
		/// </summary>
		public string VirtualNetworkName { get; set; }

	} // GetSubnetArgs

	/// <summary>
	/// A collection of values returned by getSubnet.
	/// </summary>
	public struct GetSubnetResult {
		/// <summary>
		/// The address prefix used for the subnet.
		/// </summary>
		public string AddressPrefix { get; set; }

		/// <summary>
		/// The collection of IP Configurations with IPs within this subnet.
		/// </summary>
		public string[] IpConfigurations { get; set; }

		/// <summary>
		/// The ID of the Network Security Group associated with the subnet.
		/// </summary>
		public string NetworkSecurityGroupId { get; set; }

		/// <summary>
		/// The ID of the Route Table associated with this subnet.
		/// </summary>
		public string RouteTableId { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetSubnetResult

	public static partial class NetworkModule {
		/// <summary>
		/// Use this data source to access information about an existing Subnet within a Virtual Network.
		/// </summary>
		public static System.Threading.Tasks.Task<GetSubnetResult> GetSubnet(GetSubnetArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			invokeArgs.Fields["virtualNetworkName"] = Protobuf.ToProtobuf(args.VirtualNetworkName);

			var task = Pulumi.Runtime.InvokeAsync("azure:network/getSubnet:getSubnet", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetSubnetResult();
				if (protobuf.Fields.ContainsKey("addressPrefix")) {
					result.AddressPrefix = Protobuf.ToString(protobuf.Fields["addressPrefix"]);
				}
				if (protobuf.Fields.ContainsKey("ipConfigurations")) {
					result.IpConfigurations = Protobuf.ToList(protobuf.Fields["ipConfigurations"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("networkSecurityGroupId")) {
					result.NetworkSecurityGroupId = Protobuf.ToString(protobuf.Fields["networkSecurityGroupId"]);
				}
				if (protobuf.Fields.ContainsKey("routeTableId")) {
					result.RouteTableId = Protobuf.ToString(protobuf.Fields["routeTableId"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetSubnet

	} // NetworkModule
} // Pulumi.Azure.Network
