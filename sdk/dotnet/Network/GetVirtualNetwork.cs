// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Network {

	/// <summary>
	/// A collection of arguments for invoking getVirtualNetwork.
	/// </summary>
	public struct GetVirtualNetworkArgs {
		/// <summary>
		/// Specifies the name of the Virtual Network.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// Specifies the name of the resource group the Virtual Network is located in.
		/// </summary>
		public string ResourceGroupName { get; set; }

	} // GetVirtualNetworkArgs

	/// <summary>
	/// A collection of values returned by getVirtualNetwork.
	/// </summary>
	public struct GetVirtualNetworkResult {
		/// <summary>
		/// The list of address spaces used by the virtual network.
		/// </summary>
		public string[] AddressSpaces { get; set; }

		/// <summary>
		/// The list of DNS servers used by the virtual network.
		/// </summary>
		public string[] DnsServers { get; set; }

		/// <summary>
		/// The list of name of the subnets that are attached to this virtual network.
		/// </summary>
		public string[] Subnets { get; set; }

		/// <summary>
		/// A mapping of name - virtual network id of the virtual network peerings.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> VnetPeerings { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetVirtualNetworkResult

	public static partial class NetworkModule {
		/// <summary>
		/// Use this data source to access information about an existing Virtual Network.
		/// </summary>
		public static System.Threading.Tasks.Task<GetVirtualNetworkResult> GetVirtualNetwork(GetVirtualNetworkArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);

			var task = Pulumi.Runtime.InvokeAsync("azure:network/getVirtualNetwork:getVirtualNetwork", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetVirtualNetworkResult();
				if (protobuf.Fields.ContainsKey("addressSpaces")) {
					result.AddressSpaces = Protobuf.ToList(protobuf.Fields["addressSpaces"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("dnsServers")) {
					result.DnsServers = Protobuf.ToList(protobuf.Fields["dnsServers"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("subnets")) {
					result.Subnets = Protobuf.ToList(protobuf.Fields["subnets"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("vnetPeerings")) {
					result.VnetPeerings = Protobuf.ToMap(protobuf.Fields["vnetPeerings"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetVirtualNetwork

	} // NetworkModule
} // Pulumi.Azure.Network
