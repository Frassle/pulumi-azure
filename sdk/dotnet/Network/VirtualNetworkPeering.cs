// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Network {

	/// <summary>
	/// The set of arguments for constructing a VirtualNetworkPeering resource.
	/// </summary>
	public struct VirtualNetworkPeeringArgs {
		/// <summary>
		/// Controls if forwarded traffic from  VMs
		/// in the remote virtual network is allowed. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> AllowForwardedTraffic { get; set; }

		/// <summary>
		/// Controls gatewayLinks can be used in the
		/// remote virtual network’s link to the local virtual network.
		/// </summary>
		public Pulumi.IO<bool> AllowGatewayTransit { get; set; }

		/// <summary>
		/// Controls if the VMs in the remote
		/// virtual network can access VMs in the local virtual network. Defaults to
		/// false.
		/// </summary>
		public Pulumi.IO<bool> AllowVirtualNetworkAccess { get; set; }

		/// <summary>
		/// The name of the virtual network peering. Changing this
		/// forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The full Azure resource ID of the
		/// remote virtual network.  Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> RemoteVirtualNetworkId { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the virtual network. Changing this forces a new resource to be
		/// created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Controls if remote gateways can be used on
		/// the local virtual network. If the flag is set to `true`, and
		/// `allow_gateway_transit` on the remote peering is also `true`, virtual network will
		/// use gateways of remote virtual network for transit. Only one peering can
		/// have this flag set to `true`. This flag cannot be set if virtual network
		/// already has a gateway. Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> UseRemoteGateways { get; set; }

		/// <summary>
		/// The name of the virtual network. Changing
		/// this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> VirtualNetworkName { get; set; }

	} // VirtualNetworkPeeringArgs

	/// <summary>
	/// Manages a virtual network peering which allows resources to access other
	/// resources in the linked virtual network.
	/// </summary>
	public class VirtualNetworkPeering : Pulumi.CustomResource {
		/// <summary>
		/// Controls if forwarded traffic from  VMs
		/// in the remote virtual network is allowed. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> AllowForwardedTraffic { get; set; }

		/// <summary>
		/// Controls gatewayLinks can be used in the
		/// remote virtual network’s link to the local virtual network.
		/// </summary>
		public Pulumi.IO<bool> AllowGatewayTransit { get; set; }

		/// <summary>
		/// Controls if the VMs in the remote
		/// virtual network can access VMs in the local virtual network. Defaults to
		/// false.
		/// </summary>
		public Pulumi.IO<bool> AllowVirtualNetworkAccess { get; set; }

		/// <summary>
		/// The name of the virtual network peering. Changing this
		/// forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The full Azure resource ID of the
		/// remote virtual network.  Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> RemoteVirtualNetworkId { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the virtual network. Changing this forces a new resource to be
		/// created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Controls if remote gateways can be used on
		/// the local virtual network. If the flag is set to `true`, and
		/// `allow_gateway_transit` on the remote peering is also `true`, virtual network will
		/// use gateways of remote virtual network for transit. Only one peering can
		/// have this flag set to `true`. This flag cannot be set if virtual network
		/// already has a gateway. Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> UseRemoteGateways { get; set; }

		/// <summary>
		/// The name of the virtual network. Changing
		/// this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> VirtualNetworkName { get; set; }

		public VirtualNetworkPeering(string name, VirtualNetworkPeeringArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, SerialiseArgs(args), opts) {
			AllowForwardedTraffic = base.Outputs["allowForwardedTraffic"].Select(item => Protobuf.ToBool(item));
			AllowGatewayTransit = base.Outputs["allowGatewayTransit"].Select(item => Protobuf.ToBool(item));
			AllowVirtualNetworkAccess = base.Outputs["allowVirtualNetworkAccess"].Select(item => Protobuf.ToBool(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			RemoteVirtualNetworkId = base.Outputs["remoteVirtualNetworkId"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			UseRemoteGateways = base.Outputs["useRemoteGateways"].Select(item => Protobuf.ToBool(item));
			VirtualNetworkName = base.Outputs["virtualNetworkName"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(VirtualNetworkPeeringArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["allowForwardedTraffic"] = Protobuf.ToProtobuf(args.AllowForwardedTraffic);
			props["allowGatewayTransit"] = Protobuf.ToProtobuf(args.AllowGatewayTransit);
			props["allowVirtualNetworkAccess"] = Protobuf.ToProtobuf(args.AllowVirtualNetworkAccess);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["remoteVirtualNetworkId"] = Protobuf.ToProtobuf(args.RemoteVirtualNetworkId);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["useRemoteGateways"] = Protobuf.ToProtobuf(args.UseRemoteGateways);
			props["virtualNetworkName"] = Protobuf.ToProtobuf(args.VirtualNetworkName);
			return props;
		} // SerialiseArgs

	} // VirtualNetworkPeering
} // Pulumi.Azure.Network
