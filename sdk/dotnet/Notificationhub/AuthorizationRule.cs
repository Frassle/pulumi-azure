// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Notificationhub {

	/// <summary>
	/// The set of arguments for constructing a AuthorizationRule resource.
	/// </summary>
	public struct AuthorizationRuleArgs {
		/// <summary>
		/// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> Listen { get; set; }

		/// <summary>
		/// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> Manage { get; set; }

		/// <summary>
		/// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> NamespaceName { get; set; }

		/// <summary>
		/// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> NotificationHubName { get; set; }

		/// <summary>
		/// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> Send { get; set; }

	} // AuthorizationRuleArgs

	/// <summary>
	/// Manages an Authorization Rule associated with a Notification Hub within a Notification Hub Namespace.
	/// </summary>
	public class AuthorizationRule : Pulumi.CustomResource {
		/// <summary>
		/// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> Listen { get; set; }

		/// <summary>
		/// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> Manage { get; set; }

		/// <summary>
		/// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> NamespaceName { get; set; }

		/// <summary>
		/// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> NotificationHubName { get; set; }

		/// <summary>
		/// The Primary Access Key associated with this Authorization Rule.
		/// </summary>
		public Pulumi.IO<string> PrimaryAccessKey { get; set; }

		/// <summary>
		/// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// The Secondary Access Key associated with this Authorization Rule.
		/// </summary>
		public Pulumi.IO<string> SecondaryAccessKey { get; set; }

		/// <summary>
		/// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> Send { get; set; }

		public AuthorizationRule(string name, AuthorizationRuleArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:notificationhub/authorizationRule:AuthorizationRule", name, SerialiseArgs(args), opts) {
			Listen = base.Outputs["listen"].Select(item => Protobuf.ToBool(item));
			Manage = base.Outputs["manage"].Select(item => Protobuf.ToBool(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			NamespaceName = base.Outputs["namespaceName"].Select(item => Protobuf.ToString(item));
			NotificationHubName = base.Outputs["notificationHubName"].Select(item => Protobuf.ToString(item));
			PrimaryAccessKey = base.Outputs["primaryAccessKey"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			SecondaryAccessKey = base.Outputs["secondaryAccessKey"].Select(item => Protobuf.ToString(item));
			Send = base.Outputs["send"].Select(item => Protobuf.ToBool(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(AuthorizationRuleArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["listen"] = Protobuf.ToProtobuf(args.Listen);
			props["manage"] = Protobuf.ToProtobuf(args.Manage);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["namespaceName"] = Protobuf.ToProtobuf(args.NamespaceName);
			props["notificationHubName"] = Protobuf.ToProtobuf(args.NotificationHubName);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["send"] = Protobuf.ToProtobuf(args.Send);
			props["primaryAccessKey"] = null; //out
			props["secondaryAccessKey"] = null; //out
			return props;
		} // SerialiseArgs

	} // AuthorizationRule
} // Pulumi.Azure.Notificationhub
