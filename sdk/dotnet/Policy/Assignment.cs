// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Policy {

	public sealed class AssignmentArgsIdentity : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> PrincipalId { get; set; }
		public Pulumi.IO<string> TenantId { get; set; }
		public Pulumi.IO<string> Type { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("principal_id", Protobuf.ToProtobuf(PrincipalId)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("tenant_id", Protobuf.ToProtobuf(TenantId)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("type", Protobuf.ToProtobuf(Type)));
		} // ToProtobuf

	} // AssignmentArgsIdentity

	public sealed class AssignmentIdentity : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> PrincipalId { get; set; }
		public Pulumi.IO<string> TenantId { get; set; }
		public Pulumi.IO<string> Type { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("principal_id", Protobuf.ToProtobuf(PrincipalId)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("tenant_id", Protobuf.ToProtobuf(TenantId)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("type", Protobuf.ToProtobuf(Type)));
		} // ToProtobuf

		public static AssignmentIdentity FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new AssignmentIdentity();
				if (obj.Fields.ContainsKey("principal_id")) {
					result.PrincipalId = Protobuf.ToString(obj.Fields["principal_id"]);
				}
				if (obj.Fields.ContainsKey("tenant_id")) {
					result.TenantId = Protobuf.ToString(obj.Fields["tenant_id"]);
				}
				if (obj.Fields.ContainsKey("type")) {
					result.Type = Protobuf.ToString(obj.Fields["type"]);
				}
			return result;
		} // FromProtobuf

	} // AssignmentIdentity

	/// <summary>
	/// The set of arguments for constructing a Assignment resource.
	/// </summary>
	public struct AssignmentArgs {
		/// <summary>
		/// A description to use for this Policy Assignment. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// A friendly display name to use for this Policy Assignment. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> DisplayName { get; set; }

		/// <summary>
		/// An `identity` block.
		/// </summary>
		public Pulumi.IO<AssignmentArgsIdentity> Identity { get; set; }

		/// <summary>
		/// The Azure location where this policy assignment should exist. This is required when an Identity is assigned. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// The name of the Policy Assignment. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A list of the Policy Assignment's excluded scopes. The list must contain Resource IDs (such as Subscriptions e.g. `/subscriptions/00000000-0000-0000-000000000000` or Resource Groups e.g.`/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup`). 
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> NotScopes { get; set; }

		/// <summary>
		/// Parameters for the policy definition. This field is a JSON object that maps to the Parameters field from the Policy Definition. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Parameters { get; set; }

		/// <summary>
		/// The ID of the Policy Definition to be applied at the specified Scope.
		/// </summary>
		public Pulumi.IO<string> PolicyDefinitionId { get; set; }

		public Pulumi.IO<string> Scope { get; set; }

	} // AssignmentArgs

	/// <summary>
	/// Configures the specified Policy Definition at the specified Scope. Also, Policy Set Definitions are supported.
	/// </summary>
	public class Assignment : Pulumi.CustomResource {
		/// <summary>
		/// A description to use for this Policy Assignment. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// A friendly display name to use for this Policy Assignment. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> DisplayName { get; set; }

		/// <summary>
		/// An `identity` block.
		/// </summary>
		public Pulumi.IO<AssignmentIdentity> Identity { get; set; }

		/// <summary>
		/// The Azure location where this policy assignment should exist. This is required when an Identity is assigned. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// The name of the Policy Assignment. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A list of the Policy Assignment's excluded scopes. The list must contain Resource IDs (such as Subscriptions e.g. `/subscriptions/00000000-0000-0000-000000000000` or Resource Groups e.g.`/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup`). 
		/// </summary>
		public Pulumi.IO<string[]> NotScopes { get; set; }

		/// <summary>
		/// Parameters for the policy definition. This field is a JSON object that maps to the Parameters field from the Policy Definition. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Parameters { get; set; }

		/// <summary>
		/// The ID of the Policy Definition to be applied at the specified Scope.
		/// </summary>
		public Pulumi.IO<string> PolicyDefinitionId { get; set; }

		public Pulumi.IO<string> Scope { get; set; }

		public Assignment(string name, AssignmentArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:policy/assignment:Assignment", name, SerialiseArgs(args), opts) {
			Description = base.Outputs["description"].Select(item => Protobuf.ToString(item));
			DisplayName = base.Outputs["displayName"].Select(item => Protobuf.ToString(item));
			Identity = base.Outputs["identity"].Select(item => AssignmentIdentity.FromProtobuf(item));
			Location = base.Outputs["location"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			NotScopes = base.Outputs["notScopes"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Parameters = base.Outputs["parameters"].Select(item => Protobuf.ToString(item));
			PolicyDefinitionId = base.Outputs["policyDefinitionId"].Select(item => Protobuf.ToString(item));
			Scope = base.Outputs["scope"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(AssignmentArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["displayName"] = Protobuf.ToProtobuf(args.DisplayName);
			props["identity"] = Protobuf.ToProtobuf(args.Identity);
			props["location"] = Protobuf.ToProtobuf(args.Location);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["notScopes"] = Protobuf.ToProtobuf(args.NotScopes, item => Protobuf.ToProtobuf(item));
			props["parameters"] = Protobuf.ToProtobuf(args.Parameters);
			props["policyDefinitionId"] = Protobuf.ToProtobuf(args.PolicyDefinitionId);
			props["scope"] = Protobuf.ToProtobuf(args.Scope);
			return props;
		} // SerialiseArgs

	} // Assignment
} // Pulumi.Azure.Policy
