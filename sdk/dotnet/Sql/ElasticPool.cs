// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Sql {

	/// <summary>
	/// The set of arguments for constructing a ElasticPool resource.
	/// </summary>
	public struct ElasticPoolArgs {
		/// <summary>
		/// The maximum DTU which will be guaranteed to all databases in the elastic pool to be created.
		/// </summary>
		public Pulumi.IO<int> DbDtuMax { get; set; }

		/// <summary>
		/// The minimum DTU which will be guaranteed to all databases in the elastic pool to be created.
		/// </summary>
		public Pulumi.IO<int> DbDtuMin { get; set; }

		/// <summary>
		/// The total shared DTU for the elastic pool. Valid values depend on the `edition` which has been defined. Refer to [Azure SQL Database Service Tiers](https://docs.microsoft.com/en-gb/azure/sql-database/sql-database-service-tiers#elastic-pool-service-tiers-and-performance-in-edtus) for valid combinations.
		/// </summary>
		public Pulumi.IO<int> Dtu { get; set; }

		/// <summary>
		/// The edition of the elastic pool to be created. Valid values are `Basic`, `Standard`, and `Premium`. Refer to [Azure SQL Database Service Tiers](https://docs.microsoft.com/en-gb/azure/sql-database/sql-database-service-tiers#elastic-pool-service-tiers-and-performance-in-edtus) for details. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Edition { get; set; }

		/// <summary>
		/// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// The name of the elastic pool. This needs to be globally unique. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The maximum size in MB that all databases in the elastic pool can grow to. The maximum size must be consistent with combination of `edition` and `dtu` and the limits documented in [Azure SQL Database Service Tiers](https://docs.microsoft.com/en-gb/azure/sql-database/sql-database-service-tiers#elastic-pool-service-tiers-and-performance-in-edtus). If not defined when creating an elastic pool, the value is set to the size implied by `edition` and `dtu`.
		/// </summary>
		public Pulumi.IO<int> PoolSize { get; set; }

		/// <summary>
		/// The name of the resource group in which to create the elastic pool. This must be the same as the resource group of the underlying SQL server.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// The name of the SQL Server on which to create the elastic pool. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ServerName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

	} // ElasticPoolArgs

	/// <summary>
	/// Allows you to manage an Azure SQL Elastic Pool.
	/// 
	/// > **NOTE:** -  This version of the `Elasticpool` resource is being **deprecated** and should no longer be used. Please use the azurerm_mssql_elasticpool version instead.
	/// </summary>
	public class ElasticPool : Pulumi.CustomResource {
		/// <summary>
		/// The creation date of the SQL Elastic Pool.
		/// </summary>
		public Pulumi.IO<string> CreationDate { get; set; }

		/// <summary>
		/// The maximum DTU which will be guaranteed to all databases in the elastic pool to be created.
		/// </summary>
		public Pulumi.IO<int> DbDtuMax { get; set; }

		/// <summary>
		/// The minimum DTU which will be guaranteed to all databases in the elastic pool to be created.
		/// </summary>
		public Pulumi.IO<int> DbDtuMin { get; set; }

		/// <summary>
		/// The total shared DTU for the elastic pool. Valid values depend on the `edition` which has been defined. Refer to [Azure SQL Database Service Tiers](https://docs.microsoft.com/en-gb/azure/sql-database/sql-database-service-tiers#elastic-pool-service-tiers-and-performance-in-edtus) for valid combinations.
		/// </summary>
		public Pulumi.IO<int> Dtu { get; set; }

		/// <summary>
		/// The edition of the elastic pool to be created. Valid values are `Basic`, `Standard`, and `Premium`. Refer to [Azure SQL Database Service Tiers](https://docs.microsoft.com/en-gb/azure/sql-database/sql-database-service-tiers#elastic-pool-service-tiers-and-performance-in-edtus) for details. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Edition { get; set; }

		/// <summary>
		/// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// The name of the elastic pool. This needs to be globally unique. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The maximum size in MB that all databases in the elastic pool can grow to. The maximum size must be consistent with combination of `edition` and `dtu` and the limits documented in [Azure SQL Database Service Tiers](https://docs.microsoft.com/en-gb/azure/sql-database/sql-database-service-tiers#elastic-pool-service-tiers-and-performance-in-edtus). If not defined when creating an elastic pool, the value is set to the size implied by `edition` and `dtu`.
		/// </summary>
		public Pulumi.IO<int> PoolSize { get; set; }

		/// <summary>
		/// The name of the resource group in which to create the elastic pool. This must be the same as the resource group of the underlying SQL server.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// The name of the SQL Server on which to create the elastic pool. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ServerName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		public ElasticPool(string name, ElasticPoolArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:sql/elasticPool:ElasticPool", name, SerialiseArgs(args), opts) {
			CreationDate = base.Outputs["creationDate"].Select(item => Protobuf.ToString(item));
			DbDtuMax = base.Outputs["dbDtuMax"].Select(item => Protobuf.ToInt(item));
			DbDtuMin = base.Outputs["dbDtuMin"].Select(item => Protobuf.ToInt(item));
			Dtu = base.Outputs["dtu"].Select(item => Protobuf.ToInt(item));
			Edition = base.Outputs["edition"].Select(item => Protobuf.ToString(item));
			Location = base.Outputs["location"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			PoolSize = base.Outputs["poolSize"].Select(item => Protobuf.ToInt(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			ServerName = base.Outputs["serverName"].Select(item => Protobuf.ToString(item));
			Tags = base.Outputs["tags"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ElasticPoolArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["dbDtuMax"] = Protobuf.ToProtobuf(args.DbDtuMax);
			props["dbDtuMin"] = Protobuf.ToProtobuf(args.DbDtuMin);
			props["dtu"] = Protobuf.ToProtobuf(args.Dtu);
			props["edition"] = Protobuf.ToProtobuf(args.Edition);
			props["location"] = Protobuf.ToProtobuf(args.Location);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["poolSize"] = Protobuf.ToProtobuf(args.PoolSize);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["serverName"] = Protobuf.ToProtobuf(args.ServerName);
			props["tags"] = Protobuf.ToProtobuf(args.Tags);
			props["creationDate"] = null; //out
			return props;
		} // SerialiseArgs

	} // ElasticPool
} // Pulumi.Azure.Sql
