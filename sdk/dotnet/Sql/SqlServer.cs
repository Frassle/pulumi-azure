// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Sql {

	/// <summary>
	/// The set of arguments for constructing a SqlServer resource.
	/// </summary>
	public struct SqlServerArgs {
		/// <summary>
		/// The administrator login name for the new server. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> AdministratorLogin { get; set; }

		/// <summary>
		/// The password associated with the `administrator_login` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
		/// </summary>
		public Pulumi.IO<string> AdministratorLoginPassword { get; set; }

		/// <summary>
		/// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// The name of the SQL Server. This needs to be globally unique within Azure.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The name of the resource group in which to create the SQL Server.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
		/// </summary>
		public Pulumi.IO<string> Version { get; set; }

	} // SqlServerArgs

	/// <summary>
	/// Manages a SQL Azure Database Server.
	/// 
	/// > **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text.
	/// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
	/// </summary>
	public class SqlServer : Pulumi.CustomResource {
		/// <summary>
		/// The administrator login name for the new server. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> AdministratorLogin { get; set; }

		/// <summary>
		/// The password associated with the `administrator_login` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
		/// </summary>
		public Pulumi.IO<string> AdministratorLoginPassword { get; set; }

		/// <summary>
		/// The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
		/// </summary>
		public Pulumi.IO<string> FullyQualifiedDomainName { get; set; }

		/// <summary>
		/// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// The name of the SQL Server. This needs to be globally unique within Azure.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The name of the resource group in which to create the SQL Server.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
		/// </summary>
		public Pulumi.IO<string> Version { get; set; }

		public SqlServer(string name, SqlServerArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:sql/sqlServer:SqlServer", name, SerialiseArgs(args), opts) {
			AdministratorLogin = base.Outputs["administratorLogin"].Select(item => Protobuf.ToString(item));
			AdministratorLoginPassword = base.Outputs["administratorLoginPassword"].Select(item => Protobuf.ToString(item));
			FullyQualifiedDomainName = base.Outputs["fullyQualifiedDomainName"].Select(item => Protobuf.ToString(item));
			Location = base.Outputs["location"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			Tags = base.Outputs["tags"].Select(item => Protobuf.ToMap(item));
			Version = base.Outputs["version"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(SqlServerArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["administratorLogin"] = Protobuf.ToProtobuf(args.AdministratorLogin);
			props["administratorLoginPassword"] = Protobuf.ToProtobuf(args.AdministratorLoginPassword);
			props["location"] = Protobuf.ToProtobuf(args.Location);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["tags"] = Protobuf.ToProtobuf(args.Tags);
			props["version"] = Protobuf.ToProtobuf(args.Version);
			props["fullyQualifiedDomainName"] = null; //out
			return props;
		} // SerialiseArgs

	} // SqlServer
} // Pulumi.Azure.Sql
