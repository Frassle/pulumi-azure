// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Dns {

	/// <summary>
	/// The set of arguments for constructing a Zone resource.
	/// </summary>
	public struct ZoneArgs {
		/// <summary>
		/// The name of the DNS Zone. Must be a valid domain name.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A list of Virtual Network ID's that register hostnames in this DNS zone. This field can only be set when `zone_type` is set to `Private`.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> RegistrationVirtualNetworkIds { get; set; }

		/// <summary>
		/// A list of Virtual Network ID's that resolve records in this DNS zone. This field can only be set when `zone_type` is set to `Private`.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> ResolutionVirtualNetworkIds { get; set; }

		/// <summary>
		/// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// Specifies the type of this DNS zone. Possible values are `Public` or `Private` (Defaults to `Public`).
		/// </summary>
		public Pulumi.IO<string> ZoneType { get; set; }

	} // ZoneArgs

	/// <summary>
	/// Enables you to manage DNS zones within Azure DNS. These zones are hosted on Azure's name servers to which you can delegate the zone from the parent domain.
	/// </summary>
	public class Zone : Pulumi.CustomResource {
		/// <summary>
		/// (Optional) Maximum number of Records in the zone. Defaults to `1000`.
		/// </summary>
		public Pulumi.IO<int> MaxNumberOfRecordSets { get; set; }

		/// <summary>
		/// The name of the DNS Zone. Must be a valid domain name.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// (Optional) A list of values that make up the NS record for the zone.
		/// </summary>
		public Pulumi.IO<string[]> NameServers { get; set; }

		/// <summary>
		/// (Optional) The number of records already in the zone.
		/// </summary>
		public Pulumi.IO<int> NumberOfRecordSets { get; set; }

		/// <summary>
		/// A list of Virtual Network ID's that register hostnames in this DNS zone. This field can only be set when `zone_type` is set to `Private`.
		/// </summary>
		public Pulumi.IO<string[]> RegistrationVirtualNetworkIds { get; set; }

		/// <summary>
		/// A list of Virtual Network ID's that resolve records in this DNS zone. This field can only be set when `zone_type` is set to `Private`.
		/// </summary>
		public Pulumi.IO<string[]> ResolutionVirtualNetworkIds { get; set; }

		/// <summary>
		/// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// Specifies the type of this DNS zone. Possible values are `Public` or `Private` (Defaults to `Public`).
		/// </summary>
		public Pulumi.IO<string> ZoneType { get; set; }

		public Zone(string name, ZoneArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:dns/zone:Zone", name, SerialiseArgs(args), opts) {
			MaxNumberOfRecordSets = base.Outputs["maxNumberOfRecordSets"].Select(item => Protobuf.ToInt(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			NameServers = base.Outputs["nameServers"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			NumberOfRecordSets = base.Outputs["numberOfRecordSets"].Select(item => Protobuf.ToInt(item));
			RegistrationVirtualNetworkIds = base.Outputs["registrationVirtualNetworkIds"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			ResolutionVirtualNetworkIds = base.Outputs["resolutionVirtualNetworkIds"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			Tags = base.Outputs["tags"].Select(item => Protobuf.ToMap(item));
			ZoneType = base.Outputs["zoneType"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ZoneArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["registrationVirtualNetworkIds"] = Protobuf.ToProtobuf(args.RegistrationVirtualNetworkIds, item => Protobuf.ToProtobuf(item));
			props["resolutionVirtualNetworkIds"] = Protobuf.ToProtobuf(args.ResolutionVirtualNetworkIds, item => Protobuf.ToProtobuf(item));
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["tags"] = Protobuf.ToProtobuf(args.Tags);
			props["zoneType"] = Protobuf.ToProtobuf(args.ZoneType);
			props["maxNumberOfRecordSets"] = null; //out
			props["nameServers"] = null; //out
			props["numberOfRecordSets"] = null; //out
			return props;
		} // SerialiseArgs

	} // Zone
} // Pulumi.Azure.Dns
