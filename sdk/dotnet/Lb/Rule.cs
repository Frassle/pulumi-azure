// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Lb {

	/// <summary>
	/// The set of arguments for constructing a Rule resource.
	/// </summary>
	public struct RuleArgs {
		/// <summary>
		/// A reference to a Backend Address Pool over which this Load Balancing Rule operates.
		/// </summary>
		public Pulumi.IO<string> BackendAddressPoolId { get; set; }

		/// <summary>
		/// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
		/// </summary>
		public Pulumi.IO<int> BackendPort { get; set; }

		/// <summary>
		/// Floating IP is pertinent to failover scenarios: a "floating” IP is reassigned to a secondary server in case the primary server fails. Floating IP is required for SQL AlwaysOn.
		/// </summary>
		public Pulumi.IO<bool> EnableFloatingIp { get; set; }

		/// <summary>
		/// The name of the frontend IP configuration to which the rule is associated.
		/// </summary>
		public Pulumi.IO<string> FrontendIpConfigurationName { get; set; }

		/// <summary>
		/// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
		/// </summary>
		public Pulumi.IO<int> FrontendPort { get; set; }

		/// <summary>
		/// Specifies the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp.
		/// </summary>
		public Pulumi.IO<int> IdleTimeoutInMinutes { get; set; }

		/// <summary>
		/// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where  the options are called `None`, `Client IP` and `Client IP and Protocol` respectively.
		/// </summary>
		public Pulumi.IO<string> LoadDistribution { get; set; }

		/// <summary>
		/// The ID of the Load Balancer in which to create the Rule.
		/// </summary>
		public Pulumi.IO<string> LoadbalancerId { get; set; }

		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// Specifies the name of the LB Rule.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A reference to a Probe used by this Load Balancing Rule.
		/// </summary>
		public Pulumi.IO<string> ProbeId { get; set; }

		/// <summary>
		/// The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
		/// </summary>
		public Pulumi.IO<string> Protocol { get; set; }

		/// <summary>
		/// The name of the resource group in which to create the resource.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

	} // RuleArgs

	/// <summary>
	/// Manages a Load Balancer Rule.
	/// 
	/// > **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
	/// </summary>
	public class Rule : Pulumi.CustomResource {
		/// <summary>
		/// A reference to a Backend Address Pool over which this Load Balancing Rule operates.
		/// </summary>
		public Pulumi.IO<string> BackendAddressPoolId { get; set; }

		/// <summary>
		/// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
		/// </summary>
		public Pulumi.IO<int> BackendPort { get; set; }

		/// <summary>
		/// Floating IP is pertinent to failover scenarios: a "floating” IP is reassigned to a secondary server in case the primary server fails. Floating IP is required for SQL AlwaysOn.
		/// </summary>
		public Pulumi.IO<bool> EnableFloatingIp { get; set; }

		public Pulumi.IO<string> FrontendIpConfigurationId { get; set; }

		/// <summary>
		/// The name of the frontend IP configuration to which the rule is associated.
		/// </summary>
		public Pulumi.IO<string> FrontendIpConfigurationName { get; set; }

		/// <summary>
		/// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
		/// </summary>
		public Pulumi.IO<int> FrontendPort { get; set; }

		/// <summary>
		/// Specifies the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp.
		/// </summary>
		public Pulumi.IO<int> IdleTimeoutInMinutes { get; set; }

		/// <summary>
		/// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where  the options are called `None`, `Client IP` and `Client IP and Protocol` respectively.
		/// </summary>
		public Pulumi.IO<string> LoadDistribution { get; set; }

		/// <summary>
		/// The ID of the Load Balancer in which to create the Rule.
		/// </summary>
		public Pulumi.IO<string> LoadbalancerId { get; set; }

		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// Specifies the name of the LB Rule.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A reference to a Probe used by this Load Balancing Rule.
		/// </summary>
		public Pulumi.IO<string> ProbeId { get; set; }

		/// <summary>
		/// The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
		/// </summary>
		public Pulumi.IO<string> Protocol { get; set; }

		/// <summary>
		/// The name of the resource group in which to create the resource.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		public Rule(string name, RuleArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:lb/rule:Rule", name, SerialiseArgs(args), opts) {
			BackendAddressPoolId = base.Outputs["backendAddressPoolId"].Select(item => Protobuf.ToString(item));
			BackendPort = base.Outputs["backendPort"].Select(item => Protobuf.ToInt(item));
			EnableFloatingIp = base.Outputs["enableFloatingIp"].Select(item => Protobuf.ToBool(item));
			FrontendIpConfigurationId = base.Outputs["frontendIpConfigurationId"].Select(item => Protobuf.ToString(item));
			FrontendIpConfigurationName = base.Outputs["frontendIpConfigurationName"].Select(item => Protobuf.ToString(item));
			FrontendPort = base.Outputs["frontendPort"].Select(item => Protobuf.ToInt(item));
			IdleTimeoutInMinutes = base.Outputs["idleTimeoutInMinutes"].Select(item => Protobuf.ToInt(item));
			LoadDistribution = base.Outputs["loadDistribution"].Select(item => Protobuf.ToString(item));
			LoadbalancerId = base.Outputs["loadbalancerId"].Select(item => Protobuf.ToString(item));
			Location = base.Outputs["location"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			ProbeId = base.Outputs["probeId"].Select(item => Protobuf.ToString(item));
			Protocol = base.Outputs["protocol"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(RuleArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["backendAddressPoolId"] = Protobuf.ToProtobuf(args.BackendAddressPoolId);
			props["backendPort"] = Protobuf.ToProtobuf(args.BackendPort);
			props["enableFloatingIp"] = Protobuf.ToProtobuf(args.EnableFloatingIp);
			props["frontendIpConfigurationName"] = Protobuf.ToProtobuf(args.FrontendIpConfigurationName);
			props["frontendPort"] = Protobuf.ToProtobuf(args.FrontendPort);
			props["idleTimeoutInMinutes"] = Protobuf.ToProtobuf(args.IdleTimeoutInMinutes);
			props["loadDistribution"] = Protobuf.ToProtobuf(args.LoadDistribution);
			props["loadbalancerId"] = Protobuf.ToProtobuf(args.LoadbalancerId);
			props["location"] = Protobuf.ToProtobuf(args.Location);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["probeId"] = Protobuf.ToProtobuf(args.ProbeId);
			props["protocol"] = Protobuf.ToProtobuf(args.Protocol);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["frontendIpConfigurationId"] = null; //out
			return props;
		} // SerialiseArgs

	} // Rule
} // Pulumi.Azure.Lb
