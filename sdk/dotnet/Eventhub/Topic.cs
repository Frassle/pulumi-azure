// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Eventhub {

	/// <summary>
	/// The set of arguments for constructing a Topic resource.
	/// </summary>
	public struct TopicArgs {
		/// <summary>
		/// The ISO 8601 timespan duration of the idle interval after which the
		/// Topic is automatically deleted, minimum of 5 minutes.
		/// </summary>
		public Pulumi.IO<string> AutoDeleteOnIdle { get; set; }

		/// <summary>
		/// The ISO 8601 timespan duration of TTL of messages sent to this topic if no
		/// TTL value is set on the message itself.
		/// </summary>
		public Pulumi.IO<string> DefaultMessageTtl { get; set; }

		/// <summary>
		/// The ISO 8601 timespan duration during which
		/// duplicates can be detected. Defaults to 10 minutes. (`PT10M`)
		/// </summary>
		public Pulumi.IO<string> DuplicateDetectionHistoryTimeWindow { get; set; }

		/// <summary>
		/// Boolean flag which controls if server-side
		/// batched operations are enabled. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> EnableBatchedOperations { get; set; }

		/// <summary>
		/// Boolean flag which controls whether Express Entities
		/// are enabled. An express topic holds a message in memory temporarily before writing
		/// it to persistent storage. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> EnableExpress { get; set; }

		public Pulumi.IO<bool> EnableFilteringMessagesBeforePublishing { get; set; }

		/// <summary>
		/// Boolean flag which controls whether to enable
		/// the topic to be partitioned across multiple message brokers. Defaults to false.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<bool> EnablePartitioning { get; set; }

		/// <summary>
		/// Specifies the supported Azure location where the resource exists.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// Integer value which controls the size of
		/// memory allocated for the topic. For supported values see the "Queue/topic size"
		/// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
		/// </summary>
		public Pulumi.IO<int> MaxSizeInMegabytes { get; set; }

		/// <summary>
		/// Specifies the name of the ServiceBus Topic resource. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The name of the ServiceBus Namespace to create
		/// this topic in. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> NamespaceName { get; set; }

		/// <summary>
		/// Boolean flag which controls whether
		/// the Topic requires duplicate detection. Defaults to false. Changing this forces
		/// a new resource to be created.
		/// </summary>
		public Pulumi.IO<bool> RequiresDuplicateDetection { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the namespace. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// The Status of the Service Bus Topic. Acceptable values are `Active` or `Disabled`. Defaults to `Active`.
		/// </summary>
		public Pulumi.IO<string> Status { get; set; }

		/// <summary>
		/// Boolean flag which controls whether the Topic
		/// supports ordering. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> SupportOrdering { get; set; }

	} // TopicArgs

	/// <summary>
	/// Manage a ServiceBus Topic.
	/// 
	/// **Note** Topics can only be created in Namespaces with an SKU of `standard` or higher.
	/// </summary>
	public class Topic : Pulumi.CustomResource {
		/// <summary>
		/// The ISO 8601 timespan duration of the idle interval after which the
		/// Topic is automatically deleted, minimum of 5 minutes.
		/// </summary>
		public Pulumi.IO<string> AutoDeleteOnIdle { get; set; }

		/// <summary>
		/// The ISO 8601 timespan duration of TTL of messages sent to this topic if no
		/// TTL value is set on the message itself.
		/// </summary>
		public Pulumi.IO<string> DefaultMessageTtl { get; set; }

		/// <summary>
		/// The ISO 8601 timespan duration during which
		/// duplicates can be detected. Defaults to 10 minutes. (`PT10M`)
		/// </summary>
		public Pulumi.IO<string> DuplicateDetectionHistoryTimeWindow { get; set; }

		/// <summary>
		/// Boolean flag which controls if server-side
		/// batched operations are enabled. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> EnableBatchedOperations { get; set; }

		/// <summary>
		/// Boolean flag which controls whether Express Entities
		/// are enabled. An express topic holds a message in memory temporarily before writing
		/// it to persistent storage. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> EnableExpress { get; set; }

		public Pulumi.IO<bool> EnableFilteringMessagesBeforePublishing { get; set; }

		/// <summary>
		/// Boolean flag which controls whether to enable
		/// the topic to be partitioned across multiple message brokers. Defaults to false.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<bool> EnablePartitioning { get; set; }

		/// <summary>
		/// Specifies the supported Azure location where the resource exists.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// Integer value which controls the size of
		/// memory allocated for the topic. For supported values see the "Queue/topic size"
		/// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
		/// </summary>
		public Pulumi.IO<int> MaxSizeInMegabytes { get; set; }

		/// <summary>
		/// Specifies the name of the ServiceBus Topic resource. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The name of the ServiceBus Namespace to create
		/// this topic in. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> NamespaceName { get; set; }

		/// <summary>
		/// Boolean flag which controls whether
		/// the Topic requires duplicate detection. Defaults to false. Changing this forces
		/// a new resource to be created.
		/// </summary>
		public Pulumi.IO<bool> RequiresDuplicateDetection { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the namespace. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// The Status of the Service Bus Topic. Acceptable values are `Active` or `Disabled`. Defaults to `Active`.
		/// </summary>
		public Pulumi.IO<string> Status { get; set; }

		/// <summary>
		/// Boolean flag which controls whether the Topic
		/// supports ordering. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> SupportOrdering { get; set; }

		public Topic(string name, TopicArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:eventhub/topic:Topic", name, SerialiseArgs(args), opts) {
			AutoDeleteOnIdle = base.Outputs["autoDeleteOnIdle"].Select(item => Protobuf.ToString(item));
			DefaultMessageTtl = base.Outputs["defaultMessageTtl"].Select(item => Protobuf.ToString(item));
			DuplicateDetectionHistoryTimeWindow = base.Outputs["duplicateDetectionHistoryTimeWindow"].Select(item => Protobuf.ToString(item));
			EnableBatchedOperations = base.Outputs["enableBatchedOperations"].Select(item => Protobuf.ToBool(item));
			EnableExpress = base.Outputs["enableExpress"].Select(item => Protobuf.ToBool(item));
			EnableFilteringMessagesBeforePublishing = base.Outputs["enableFilteringMessagesBeforePublishing"].Select(item => Protobuf.ToBool(item));
			EnablePartitioning = base.Outputs["enablePartitioning"].Select(item => Protobuf.ToBool(item));
			Location = base.Outputs["location"].Select(item => Protobuf.ToString(item));
			MaxSizeInMegabytes = base.Outputs["maxSizeInMegabytes"].Select(item => Protobuf.ToInt(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			NamespaceName = base.Outputs["namespaceName"].Select(item => Protobuf.ToString(item));
			RequiresDuplicateDetection = base.Outputs["requiresDuplicateDetection"].Select(item => Protobuf.ToBool(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			Status = base.Outputs["status"].Select(item => Protobuf.ToString(item));
			SupportOrdering = base.Outputs["supportOrdering"].Select(item => Protobuf.ToBool(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(TopicArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["autoDeleteOnIdle"] = Protobuf.ToProtobuf(args.AutoDeleteOnIdle);
			props["defaultMessageTtl"] = Protobuf.ToProtobuf(args.DefaultMessageTtl);
			props["duplicateDetectionHistoryTimeWindow"] = Protobuf.ToProtobuf(args.DuplicateDetectionHistoryTimeWindow);
			props["enableBatchedOperations"] = Protobuf.ToProtobuf(args.EnableBatchedOperations);
			props["enableExpress"] = Protobuf.ToProtobuf(args.EnableExpress);
			props["enableFilteringMessagesBeforePublishing"] = Protobuf.ToProtobuf(args.EnableFilteringMessagesBeforePublishing);
			props["enablePartitioning"] = Protobuf.ToProtobuf(args.EnablePartitioning);
			props["location"] = Protobuf.ToProtobuf(args.Location);
			props["maxSizeInMegabytes"] = Protobuf.ToProtobuf(args.MaxSizeInMegabytes);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["namespaceName"] = Protobuf.ToProtobuf(args.NamespaceName);
			props["requiresDuplicateDetection"] = Protobuf.ToProtobuf(args.RequiresDuplicateDetection);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["status"] = Protobuf.ToProtobuf(args.Status);
			props["supportOrdering"] = Protobuf.ToProtobuf(args.SupportOrdering);
			return props;
		} // SerialiseArgs

	} // Topic
} // Pulumi.Azure.Eventhub
