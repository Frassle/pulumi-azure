// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Cosmosdb {

	public sealed class GetAccountCapability : Pulumi.IProtobuf {
		public string Name { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("name", Protobuf.ToProtobuf(Name)));
		} // ToProtobuf

		public static GetAccountCapability FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new GetAccountCapability();
				if (obj.Fields.ContainsKey("name")) {
					result.Name = Protobuf.ToString(obj.Fields["name"]);
				}
			return result;
		} // FromProtobuf

	} // GetAccountCapability

	public sealed class GetAccountConsistencyPolicy : Pulumi.IProtobuf {
		public string ConsistencyLevel { get; set; }
		public int MaxIntervalInSeconds { get; set; }
		public int MaxStalenessPrefix { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("consistency_level", Protobuf.ToProtobuf(ConsistencyLevel)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("max_interval_in_seconds", Protobuf.ToProtobuf(MaxIntervalInSeconds)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("max_staleness_prefix", Protobuf.ToProtobuf(MaxStalenessPrefix)));
		} // ToProtobuf

		public static GetAccountConsistencyPolicy FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new GetAccountConsistencyPolicy();
				if (obj.Fields.ContainsKey("consistency_level")) {
					result.ConsistencyLevel = Protobuf.ToString(obj.Fields["consistency_level"]);
				}
				if (obj.Fields.ContainsKey("max_interval_in_seconds")) {
					result.MaxIntervalInSeconds = Protobuf.ToInt(obj.Fields["max_interval_in_seconds"]);
				}
				if (obj.Fields.ContainsKey("max_staleness_prefix")) {
					result.MaxStalenessPrefix = Protobuf.ToInt(obj.Fields["max_staleness_prefix"]);
				}
			return result;
		} // FromProtobuf

	} // GetAccountConsistencyPolicy

	public sealed class GetAccountGeoLocation : Pulumi.IProtobuf {
		public int FailoverPriority { get; set; }
		public string Id { get; set; }
		public string Location { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("failover_priority", Protobuf.ToProtobuf(FailoverPriority)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("id", Protobuf.ToProtobuf(Id)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("location", Protobuf.ToProtobuf(Location)));
		} // ToProtobuf

		public static GetAccountGeoLocation FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new GetAccountGeoLocation();
				if (obj.Fields.ContainsKey("failover_priority")) {
					result.FailoverPriority = Protobuf.ToInt(obj.Fields["failover_priority"]);
				}
				if (obj.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(obj.Fields["id"]);
				}
				if (obj.Fields.ContainsKey("location")) {
					result.Location = Protobuf.ToString(obj.Fields["location"]);
				}
			return result;
		} // FromProtobuf

	} // GetAccountGeoLocation

	public sealed class GetAccountVirtualNetworkRule : Pulumi.IProtobuf {
		public string Id { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("id", Protobuf.ToProtobuf(Id)));
		} // ToProtobuf

		public static GetAccountVirtualNetworkRule FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new GetAccountVirtualNetworkRule();
				if (obj.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(obj.Fields["id"]);
				}
			return result;
		} // FromProtobuf

	} // GetAccountVirtualNetworkRule

	/// <summary>
	/// A collection of arguments for invoking getAccount.
	/// </summary>
	public struct GetAccountArgs {
		/// <summary>
		/// Specifies the name of the CosmosDB Account.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// Specifies the name of the resource group in which the CosmosDB Account resides.
		/// </summary>
		public string ResourceGroupName { get; set; }

	} // GetAccountArgs

	/// <summary>
	/// A collection of values returned by getAccount.
	/// </summary>
	public struct GetAccountResult {
		/// <summary>
		/// Capabilities enabled on this Cosmos DB account.
		/// </summary>
		public GetAccountCapability[] Capabilities { get; set; }

		public GetAccountConsistencyPolicy[] ConsistencyPolicies { get; set; }

		/// <summary>
		/// If automatic failover is enabled for this CosmosDB Account.
		/// </summary>
		public bool EnableAutomaticFailover { get; set; }

		/// <summary>
		/// If multi-master is enabled for this Cosmos DB account.
		/// </summary>
		public bool EnableMultipleWriteLocations { get; set; }

		/// <summary>
		/// The endpoint used to connect to the CosmosDB account.
		/// </summary>
		public string Endpoint { get; set; }

		public GetAccountGeoLocation[] GeoLocations { get; set; }

		/// <summary>
		/// The current IP Filter for this CosmosDB account
		/// </summary>
		public string IpRangeFilter { get; set; }

		/// <summary>
		/// If virtual network filtering is enabled for this Cosmos DB account.
		/// </summary>
		public bool IsVirtualNetworkFilterEnabled { get; set; }

		/// <summary>
		/// The Kind of the CosmosDB account.
		/// </summary>
		public string Kind { get; set; }

		/// <summary>
		/// The name of the Azure region hosting replicated data.
		/// </summary>
		public string Location { get; set; }

		/// <summary>
		/// The Offer Type to used by this CosmosDB Account.
		/// </summary>
		public string OfferType { get; set; }

		/// <summary>
		/// The Primary master key for the CosmosDB Account.
		/// </summary>
		public string PrimaryMasterKey { get; set; }

		/// <summary>
		/// The Primary read-only master Key for the CosmosDB Account.
		/// </summary>
		public string PrimaryReadonlyMasterKey { get; set; }

		/// <summary>
		/// A list of read endpoints available for this CosmosDB account.
		/// </summary>
		public string[] ReadEndpoints { get; set; }

		/// <summary>
		/// The Secondary master key for the CosmosDB Account.
		/// </summary>
		public string SecondaryMasterKey { get; set; }

		/// <summary>
		/// The Secondary read-only master key for the CosmosDB Account.
		/// </summary>
		public string SecondaryReadonlyMasterKey { get; set; }

		/// <summary>
		/// A mapping of tags assigned to the resource.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }

		/// <summary>
		/// Subnets that are allowed to access this CosmosDB account.
		/// </summary>
		public GetAccountVirtualNetworkRule[] VirtualNetworkRules { get; set; }

		/// <summary>
		/// A list of write endpoints available for this CosmosDB account.
		/// </summary>
		public string[] WriteEndpoints { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetAccountResult

	public static partial class CosmosdbModule {
		/// <summary>
		/// Use this data source to access information about an existing CosmosDB (formally DocumentDB) Account.
		/// </summary>
		public static System.Threading.Tasks.Task<GetAccountResult> GetAccount(GetAccountArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);

			var task = Pulumi.Runtime.InvokeAsync("azure:cosmosdb/getAccount:getAccount", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetAccountResult();
				if (protobuf.Fields.ContainsKey("capabilities")) {
					result.Capabilities = Protobuf.ToList(protobuf.Fields["capabilities"], item => GetAccountCapability.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("consistencyPolicies")) {
					result.ConsistencyPolicies = Protobuf.ToList(protobuf.Fields["consistencyPolicies"], item => GetAccountConsistencyPolicy.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("enableAutomaticFailover")) {
					result.EnableAutomaticFailover = Protobuf.ToBool(protobuf.Fields["enableAutomaticFailover"]);
				}
				if (protobuf.Fields.ContainsKey("enableMultipleWriteLocations")) {
					result.EnableMultipleWriteLocations = Protobuf.ToBool(protobuf.Fields["enableMultipleWriteLocations"]);
				}
				if (protobuf.Fields.ContainsKey("endpoint")) {
					result.Endpoint = Protobuf.ToString(protobuf.Fields["endpoint"]);
				}
				if (protobuf.Fields.ContainsKey("geoLocations")) {
					result.GeoLocations = Protobuf.ToList(protobuf.Fields["geoLocations"], item => GetAccountGeoLocation.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("ipRangeFilter")) {
					result.IpRangeFilter = Protobuf.ToString(protobuf.Fields["ipRangeFilter"]);
				}
				if (protobuf.Fields.ContainsKey("isVirtualNetworkFilterEnabled")) {
					result.IsVirtualNetworkFilterEnabled = Protobuf.ToBool(protobuf.Fields["isVirtualNetworkFilterEnabled"]);
				}
				if (protobuf.Fields.ContainsKey("kind")) {
					result.Kind = Protobuf.ToString(protobuf.Fields["kind"]);
				}
				if (protobuf.Fields.ContainsKey("location")) {
					result.Location = Protobuf.ToString(protobuf.Fields["location"]);
				}
				if (protobuf.Fields.ContainsKey("offerType")) {
					result.OfferType = Protobuf.ToString(protobuf.Fields["offerType"]);
				}
				if (protobuf.Fields.ContainsKey("primaryMasterKey")) {
					result.PrimaryMasterKey = Protobuf.ToString(protobuf.Fields["primaryMasterKey"]);
				}
				if (protobuf.Fields.ContainsKey("primaryReadonlyMasterKey")) {
					result.PrimaryReadonlyMasterKey = Protobuf.ToString(protobuf.Fields["primaryReadonlyMasterKey"]);
				}
				if (protobuf.Fields.ContainsKey("readEndpoints")) {
					result.ReadEndpoints = Protobuf.ToList(protobuf.Fields["readEndpoints"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("secondaryMasterKey")) {
					result.SecondaryMasterKey = Protobuf.ToString(protobuf.Fields["secondaryMasterKey"]);
				}
				if (protobuf.Fields.ContainsKey("secondaryReadonlyMasterKey")) {
					result.SecondaryReadonlyMasterKey = Protobuf.ToString(protobuf.Fields["secondaryReadonlyMasterKey"]);
				}
				if (protobuf.Fields.ContainsKey("tags")) {
					result.Tags = Protobuf.ToMap(protobuf.Fields["tags"]);
				}
				if (protobuf.Fields.ContainsKey("virtualNetworkRules")) {
					result.VirtualNetworkRules = Protobuf.ToList(protobuf.Fields["virtualNetworkRules"], item => GetAccountVirtualNetworkRule.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("writeEndpoints")) {
					result.WriteEndpoints = Protobuf.ToList(protobuf.Fields["writeEndpoints"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetAccount

	} // CosmosdbModule
} // Pulumi.Azure.Cosmosdb
