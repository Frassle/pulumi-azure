// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Datalake {

	/// <summary>
	/// A collection of arguments for invoking getStore.
	/// </summary>
	public struct GetStoreArgs {
		/// <summary>
		/// The name of the Data Lake Store.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The Name of the Resource Group where the Data Lake Store exists.
		/// </summary>
		public string ResourceGroupName { get; set; }

	} // GetStoreArgs

	/// <summary>
	/// A collection of values returned by getStore.
	/// </summary>
	public struct GetStoreResult {
		/// <summary>
		/// the Encryption State of this Data Lake Store Account, such as `Enabled` or `Disabled`.
		/// </summary>
		public string EncryptionState { get; set; }

		/// <summary>
		/// the Encryption Type used for this Data Lake Store Account.
		/// </summary>
		public string EncryptionType { get; set; }

		/// <summary>
		/// are Azure Service IP's allowed through the firewall?
		/// </summary>
		public string FirewallAllowAzureIps { get; set; }

		/// <summary>
		/// the state of the firewall, such as `Enabled` or `Disabled`.
		/// </summary>
		public string FirewallState { get; set; }

		public string Location { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the Data Lake Store.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }

		/// <summary>
		/// Current monthly commitment tier for the account.
		/// </summary>
		public string Tier { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetStoreResult

	public static partial class DatalakeModule {
		/// <summary>
		/// Use this data source to access information about an existing Data Lake Store.
		/// </summary>
		public static System.Threading.Tasks.Task<GetStoreResult> GetStore(GetStoreArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);

			var task = Pulumi.Runtime.InvokeAsync("azure:datalake/getStore:getStore", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetStoreResult();
				if (protobuf.Fields.ContainsKey("encryptionState")) {
					result.EncryptionState = Protobuf.ToString(protobuf.Fields["encryptionState"]);
				}
				if (protobuf.Fields.ContainsKey("encryptionType")) {
					result.EncryptionType = Protobuf.ToString(protobuf.Fields["encryptionType"]);
				}
				if (protobuf.Fields.ContainsKey("firewallAllowAzureIps")) {
					result.FirewallAllowAzureIps = Protobuf.ToString(protobuf.Fields["firewallAllowAzureIps"]);
				}
				if (protobuf.Fields.ContainsKey("firewallState")) {
					result.FirewallState = Protobuf.ToString(protobuf.Fields["firewallState"]);
				}
				if (protobuf.Fields.ContainsKey("location")) {
					result.Location = Protobuf.ToString(protobuf.Fields["location"]);
				}
				if (protobuf.Fields.ContainsKey("tags")) {
					result.Tags = Protobuf.ToMap(protobuf.Fields["tags"]);
				}
				if (protobuf.Fields.ContainsKey("tier")) {
					result.Tier = Protobuf.ToString(protobuf.Fields["tier"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetStore

	} // DatalakeModule
} // Pulumi.Azure.Datalake
