// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Keyvault {

	/// <summary>
	/// The set of arguments for constructing a Key resource.
	/// </summary>
	public struct KeyArgs {
		/// <summary>
		/// A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> KeyOpts { get; set; }

		/// <summary>
		/// Specifies the Size of the Key to create in bytes. For example, 1024 or 2048. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<int> KeySize { get; set; }

		/// <summary>
		/// Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `Oct` (Octet), `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> KeyType { get; set; }

		/// <summary>
		/// Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// Specifies the URI used to access the Key Vault instance, available on the `azurerm_key_vault` resource.
		/// </summary>
		public Pulumi.IO<string> VaultUri { get; set; }

	} // KeyArgs

	/// <summary>
	/// Manages a Key Vault Key.
	/// </summary>
	public class Key : Pulumi.CustomResource {
		/// <summary>
		/// The RSA public exponent of this Key Vault Key.
		/// </summary>
		public Pulumi.IO<string> E { get; set; }

		/// <summary>
		/// A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
		/// </summary>
		public Pulumi.IO<string[]> KeyOpts { get; set; }

		/// <summary>
		/// Specifies the Size of the Key to create in bytes. For example, 1024 or 2048. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<int> KeySize { get; set; }

		/// <summary>
		/// Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `Oct` (Octet), `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> KeyType { get; set; }

		/// <summary>
		/// The RSA modulus of this Key Vault Key.
		/// </summary>
		public Pulumi.IO<string> N { get; set; }

		/// <summary>
		/// Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// Specifies the URI used to access the Key Vault instance, available on the `azurerm_key_vault` resource.
		/// </summary>
		public Pulumi.IO<string> VaultUri { get; set; }

		/// <summary>
		/// The current version of the Key Vault Key.
		/// </summary>
		public Pulumi.IO<string> Version { get; set; }

		public Key(string name, KeyArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:keyvault/key:Key", name, SerialiseArgs(args), opts) {
			E = base.Outputs["e"].Select(item => Protobuf.ToString(item));
			KeyOpts = base.Outputs["keyOpts"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			KeySize = base.Outputs["keySize"].Select(item => Protobuf.ToInt(item));
			KeyType = base.Outputs["keyType"].Select(item => Protobuf.ToString(item));
			N = base.Outputs["n"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			Tags = base.Outputs["tags"].Select(item => Protobuf.ToMap(item));
			VaultUri = base.Outputs["vaultUri"].Select(item => Protobuf.ToString(item));
			Version = base.Outputs["version"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(KeyArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["keyOpts"] = Protobuf.ToProtobuf(args.KeyOpts, item => Protobuf.ToProtobuf(item));
			props["keySize"] = Protobuf.ToProtobuf(args.KeySize);
			props["keyType"] = Protobuf.ToProtobuf(args.KeyType);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["tags"] = Protobuf.ToProtobuf(args.Tags);
			props["vaultUri"] = Protobuf.ToProtobuf(args.VaultUri);
			props["e"] = null; //out
			props["n"] = null; //out
			props["version"] = null; //out
			return props;
		} // SerialiseArgs

	} // Key
} // Pulumi.Azure.Keyvault
