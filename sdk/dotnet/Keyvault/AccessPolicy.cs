// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Keyvault {

	/// <summary>
	/// The set of arguments for constructing a AccessPolicy resource.
	/// </summary>
	public struct AccessPolicyArgs {
		/// <summary>
		/// The object ID of an Application in Azure Active Directory.
		/// </summary>
		public Pulumi.IO<string> ApplicationId { get; set; }

		/// <summary>
		/// List of certificate permissions, must be one or more from
		/// the following: `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`,
		/// `managecontacts`, `manageissuers`, `purge`, `recover`, `setissuers` and `update`.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> CertificatePermissions { get; set; }

		/// <summary>
		/// List of key permissions, must be one or more from
		/// the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`,
		/// `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> KeyPermissions { get; set; }

		/// <summary>
		/// The object ID of a user, service principal or security
		/// group in the Azure Active Directory tenant for the vault. The object ID must
		/// be unique for the list of access policies. Changing this forces a new resource
		/// to be created.
		/// </summary>
		public Pulumi.IO<string> ObjectId { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the namespace. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// List of secret permissions, must be one or more
		/// from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> SecretPermissions { get; set; }

		/// <summary>
		/// The Azure Active Directory tenant ID that should be used
		/// for authenticating requests to the key vault. Changing this forces a new resource
		/// to be created.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Specifies the name of the Key Vault resource. Changing this
		/// forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> VaultName { get; set; }

	} // AccessPolicyArgs

	/// <summary>
	/// Manages a Key Vault Access Policy.
	/// 
	/// > **NOTE:** It's possible to define Key Vault Access Policies both within the `azurerm_key_vault` resource via the `access_policy` block and by using the `azurerm_key_vault_access_policy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
	/// 
	/// -> **NOTE:** Azure permits a maximum of 16 Access Policies per Key Vault - [more information can be found in this document](https://docs.microsoft.com/en-us/azure/key-vault/key-vault-secure-your-key-vault#data-plane-access-control).
	/// </summary>
	public class AccessPolicy : Pulumi.CustomResource {
		/// <summary>
		/// The object ID of an Application in Azure Active Directory.
		/// </summary>
		public Pulumi.IO<string> ApplicationId { get; set; }

		/// <summary>
		/// List of certificate permissions, must be one or more from
		/// the following: `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`,
		/// `managecontacts`, `manageissuers`, `purge`, `recover`, `setissuers` and `update`.
		/// </summary>
		public Pulumi.IO<string[]> CertificatePermissions { get; set; }

		/// <summary>
		/// List of key permissions, must be one or more from
		/// the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`,
		/// `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
		/// </summary>
		public Pulumi.IO<string[]> KeyPermissions { get; set; }

		/// <summary>
		/// The object ID of a user, service principal or security
		/// group in the Azure Active Directory tenant for the vault. The object ID must
		/// be unique for the list of access policies. Changing this forces a new resource
		/// to be created.
		/// </summary>
		public Pulumi.IO<string> ObjectId { get; set; }

		/// <summary>
		/// The name of the resource group in which to
		/// create the namespace. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// List of secret permissions, must be one or more
		/// from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
		/// </summary>
		public Pulumi.IO<string[]> SecretPermissions { get; set; }

		/// <summary>
		/// The Azure Active Directory tenant ID that should be used
		/// for authenticating requests to the key vault. Changing this forces a new resource
		/// to be created.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Specifies the name of the Key Vault resource. Changing this
		/// forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> VaultName { get; set; }

		public AccessPolicy(string name, AccessPolicyArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:keyvault/accessPolicy:AccessPolicy", name, SerialiseArgs(args), opts) {
			ApplicationId = base.Outputs["applicationId"].Select(item => Protobuf.ToString(item));
			CertificatePermissions = base.Outputs["certificatePermissions"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			KeyPermissions = base.Outputs["keyPermissions"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			ObjectId = base.Outputs["objectId"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			SecretPermissions = base.Outputs["secretPermissions"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			TenantId = base.Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			VaultName = base.Outputs["vaultName"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(AccessPolicyArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["applicationId"] = Protobuf.ToProtobuf(args.ApplicationId);
			props["certificatePermissions"] = Protobuf.ToProtobuf(args.CertificatePermissions, item => Protobuf.ToProtobuf(item));
			props["keyPermissions"] = Protobuf.ToProtobuf(args.KeyPermissions, item => Protobuf.ToProtobuf(item));
			props["objectId"] = Protobuf.ToProtobuf(args.ObjectId);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["secretPermissions"] = Protobuf.ToProtobuf(args.SecretPermissions, item => Protobuf.ToProtobuf(item));
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["vaultName"] = Protobuf.ToProtobuf(args.VaultName);
			return props;
		} // SerialiseArgs

	} // AccessPolicy
} // Pulumi.Azure.Keyvault
