// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Compute {

	/// <summary>
	/// The set of arguments for constructing a DataDiskAttachment resource.
	/// </summary>
	public struct DataDiskAttachmentArgs {
		/// <summary>
		/// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
		/// </summary>
		public Pulumi.IO<string> Caching { get; set; }

		/// <summary>
		/// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> CreateOption { get; set; }

		/// <summary>
		/// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<int> Lun { get; set; }

		/// <summary>
		/// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ManagedDiskId { get; set; }

		/// <summary>
		/// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> VirtualMachineId { get; set; }

		/// <summary>
		/// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> WriteAcceleratorEnabled { get; set; }

	} // DataDiskAttachmentArgs

	/// <summary>
	/// Manages attaching a Disk to a Virtual Machine.
	/// 
	/// > **NOTE:** Data Disks can be attached either directly on the `azurerm_virtual_machine` resource, or using the `azurerm_virtual_machine_data_disk_attachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
	/// 
	/// -> **Please Note:** only Managed Disks are supported via this separate resource, Unmanaged Disks can be attached using the `storage_data_disk` block in the `azurerm_virtual_machine` resource.
	/// </summary>
	public class DataDiskAttachment : Pulumi.CustomResource {
		/// <summary>
		/// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
		/// </summary>
		public Pulumi.IO<string> Caching { get; set; }

		/// <summary>
		/// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> CreateOption { get; set; }

		/// <summary>
		/// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<int> Lun { get; set; }

		/// <summary>
		/// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> ManagedDiskId { get; set; }

		/// <summary>
		/// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> VirtualMachineId { get; set; }

		/// <summary>
		/// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
		/// </summary>
		public Pulumi.IO<bool> WriteAcceleratorEnabled { get; set; }

		public DataDiskAttachment(string name, DataDiskAttachmentArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:compute/dataDiskAttachment:DataDiskAttachment", name, SerialiseArgs(args), opts) {
			Caching = base.Outputs["caching"].Select(item => Protobuf.ToString(item));
			CreateOption = base.Outputs["createOption"].Select(item => Protobuf.ToString(item));
			Lun = base.Outputs["lun"].Select(item => Protobuf.ToInt(item));
			ManagedDiskId = base.Outputs["managedDiskId"].Select(item => Protobuf.ToString(item));
			VirtualMachineId = base.Outputs["virtualMachineId"].Select(item => Protobuf.ToString(item));
			WriteAcceleratorEnabled = base.Outputs["writeAcceleratorEnabled"].Select(item => Protobuf.ToBool(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(DataDiskAttachmentArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["caching"] = Protobuf.ToProtobuf(args.Caching);
			props["createOption"] = Protobuf.ToProtobuf(args.CreateOption);
			props["lun"] = Protobuf.ToProtobuf(args.Lun);
			props["managedDiskId"] = Protobuf.ToProtobuf(args.ManagedDiskId);
			props["virtualMachineId"] = Protobuf.ToProtobuf(args.VirtualMachineId);
			props["writeAcceleratorEnabled"] = Protobuf.ToProtobuf(args.WriteAcceleratorEnabled);
			return props;
		} // SerialiseArgs

	} // DataDiskAttachment
} // Pulumi.Azure.Compute
