// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Compute {

	public sealed class ManagedDiskArgsEncryptionSettingArgsDiskEncryptionKey : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> SecretUrl { get; set; }
		public Pulumi.IO<string> SourceVaultId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("secret_url", Protobuf.ToProtobuf(SecretUrl)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("source_vault_id", Protobuf.ToProtobuf(SourceVaultId)));
		} // ToProtobuf

	} // ManagedDiskArgsEncryptionSettingArgsDiskEncryptionKey

	public sealed class ManagedDiskArgsEncryptionSettingArgsKeyEncryptionKey : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> KeyUrl { get; set; }
		public Pulumi.IO<string> SourceVaultId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("key_url", Protobuf.ToProtobuf(KeyUrl)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("source_vault_id", Protobuf.ToProtobuf(SourceVaultId)));
		} // ToProtobuf

	} // ManagedDiskArgsEncryptionSettingArgsKeyEncryptionKey

	public sealed class ManagedDiskArgsEncryptionSetting : Pulumi.IIOProtobuf {
		public Pulumi.IO<ManagedDiskArgsEncryptionSettingArgsDiskEncryptionKey> DiskEncryptionKey { get; set; }
		public Pulumi.IO<bool> Enabled { get; set; }
		public Pulumi.IO<ManagedDiskArgsEncryptionSettingArgsKeyEncryptionKey> KeyEncryptionKey { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("disk_encryption_key", Protobuf.ToProtobuf(DiskEncryptionKey)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("enabled", Protobuf.ToProtobuf(Enabled)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("key_encryption_key", Protobuf.ToProtobuf(KeyEncryptionKey)));
		} // ToProtobuf

	} // ManagedDiskArgsEncryptionSetting

	public sealed class ManagedDiskEncryptionSettingDiskEncryptionKey : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> SecretUrl { get; set; }
		public Pulumi.IO<string> SourceVaultId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("secret_url", Protobuf.ToProtobuf(SecretUrl)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("source_vault_id", Protobuf.ToProtobuf(SourceVaultId)));
		} // ToProtobuf

		public static ManagedDiskEncryptionSettingDiskEncryptionKey FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new ManagedDiskEncryptionSettingDiskEncryptionKey();
				if (obj.Fields.ContainsKey("secret_url")) {
					result.SecretUrl = Protobuf.ToString(obj.Fields["secret_url"]);
				}
				if (obj.Fields.ContainsKey("source_vault_id")) {
					result.SourceVaultId = Protobuf.ToString(obj.Fields["source_vault_id"]);
				}
			return result;
		} // FromProtobuf

	} // ManagedDiskEncryptionSettingDiskEncryptionKey

	public sealed class ManagedDiskEncryptionSettingKeyEncryptionKey : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> KeyUrl { get; set; }
		public Pulumi.IO<string> SourceVaultId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("key_url", Protobuf.ToProtobuf(KeyUrl)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("source_vault_id", Protobuf.ToProtobuf(SourceVaultId)));
		} // ToProtobuf

		public static ManagedDiskEncryptionSettingKeyEncryptionKey FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new ManagedDiskEncryptionSettingKeyEncryptionKey();
				if (obj.Fields.ContainsKey("key_url")) {
					result.KeyUrl = Protobuf.ToString(obj.Fields["key_url"]);
				}
				if (obj.Fields.ContainsKey("source_vault_id")) {
					result.SourceVaultId = Protobuf.ToString(obj.Fields["source_vault_id"]);
				}
			return result;
		} // FromProtobuf

	} // ManagedDiskEncryptionSettingKeyEncryptionKey

	public sealed class ManagedDiskEncryptionSetting : Pulumi.IIOProtobuf {
		public Pulumi.IO<ManagedDiskEncryptionSettingDiskEncryptionKey> DiskEncryptionKey { get; set; }
		public Pulumi.IO<bool> Enabled { get; set; }
		public Pulumi.IO<ManagedDiskEncryptionSettingKeyEncryptionKey> KeyEncryptionKey { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("disk_encryption_key", Protobuf.ToProtobuf(DiskEncryptionKey)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("enabled", Protobuf.ToProtobuf(Enabled)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("key_encryption_key", Protobuf.ToProtobuf(KeyEncryptionKey)));
		} // ToProtobuf

		public static ManagedDiskEncryptionSetting FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			var result = new ManagedDiskEncryptionSetting();
				if (obj.Fields.ContainsKey("disk_encryption_key")) {
					result.DiskEncryptionKey = ManagedDiskEncryptionSettingDiskEncryptionKey.FromProtobuf(obj.Fields["disk_encryption_key"]);
				}
				if (obj.Fields.ContainsKey("enabled")) {
					result.Enabled = Protobuf.ToBool(obj.Fields["enabled"]);
				}
				if (obj.Fields.ContainsKey("key_encryption_key")) {
					result.KeyEncryptionKey = ManagedDiskEncryptionSettingKeyEncryptionKey.FromProtobuf(obj.Fields["key_encryption_key"]);
				}
			return result;
		} // FromProtobuf

	} // ManagedDiskEncryptionSetting

	/// <summary>
	/// The set of arguments for constructing a ManagedDisk resource.
	/// </summary>
	public struct ManagedDiskArgs {
		/// <summary>
		/// The method to use when creating the managed disk. Possible values include:
		/// </summary>
		public Pulumi.IO<string> CreateOption { get; set; }

		/// <summary>
		/// Specifies the size of the managed disk to create in gigabytes.
		/// If `create_option` is `Copy` or `FromImage`, then the value must be equal to or greater than the source's size.
		/// </summary>
		public Pulumi.IO<int> DiskSizeGb { get; set; }

		/// <summary>
		/// an `encryption_settings` block as defined below.
		/// </summary>
		public Pulumi.IO<ManagedDiskArgsEncryptionSetting> EncryptionSettings { get; set; }

		/// <summary>
		/// ID of an existing platform/marketplace disk image to copy when `create_option` is `FromImage`.
		/// </summary>
		public Pulumi.IO<string> ImageReferenceId { get; set; }

		/// <summary>
		/// Specified the supported Azure location where the resource exists.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// Specifies the name of the managed disk. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// Specify a value when the source of an `Import` or `Copy`
		/// operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`
		/// </summary>
		public Pulumi.IO<string> OsType { get; set; }

		/// <summary>
		/// The name of the resource group in which to create
		/// the managed disk.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// ID of an existing managed disk to copy when `create_option` is `Copy`.
		/// </summary>
		public Pulumi.IO<string> SourceResourceId { get; set; }

		/// <summary>
		/// URI to a valid VHD file to be used when `create_option` is `Import`.
		/// </summary>
		public Pulumi.IO<string> SourceUri { get; set; }

		/// <summary>
		/// The type of storage to use for the managed disk.
		/// Allowable values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
		/// </summary>
		public Pulumi.IO<string> StorageAccountType { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// A collection containing the availability zone to allocate the Managed Disk in.
		/// </summary>
		public Pulumi.IO<string> Zones { get; set; }

	} // ManagedDiskArgs

	/// <summary>
	/// Manage a managed disk.
	/// </summary>
	public class ManagedDisk : Pulumi.CustomResource {
		/// <summary>
		/// The method to use when creating the managed disk. Possible values include:
		/// </summary>
		public Pulumi.IO<string> CreateOption { get; set; }

		/// <summary>
		/// Specifies the size of the managed disk to create in gigabytes.
		/// If `create_option` is `Copy` or `FromImage`, then the value must be equal to or greater than the source's size.
		/// </summary>
		public Pulumi.IO<int> DiskSizeGb { get; set; }

		/// <summary>
		/// an `encryption_settings` block as defined below.
		/// </summary>
		public Pulumi.IO<ManagedDiskEncryptionSetting> EncryptionSettings { get; set; }

		/// <summary>
		/// ID of an existing platform/marketplace disk image to copy when `create_option` is `FromImage`.
		/// </summary>
		public Pulumi.IO<string> ImageReferenceId { get; set; }

		/// <summary>
		/// Specified the supported Azure location where the resource exists.
		/// Changing this forces a new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Location { get; set; }

		/// <summary>
		/// Specifies the name of the managed disk. Changing this forces a
		/// new resource to be created.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// Specify a value when the source of an `Import` or `Copy`
		/// operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`
		/// </summary>
		public Pulumi.IO<string> OsType { get; set; }

		/// <summary>
		/// The name of the resource group in which to create
		/// the managed disk.
		/// </summary>
		public Pulumi.IO<string> ResourceGroupName { get; set; }

		/// <summary>
		/// ID of an existing managed disk to copy when `create_option` is `Copy`.
		/// </summary>
		public Pulumi.IO<string> SourceResourceId { get; set; }

		/// <summary>
		/// URI to a valid VHD file to be used when `create_option` is `Import`.
		/// </summary>
		public Pulumi.IO<string> SourceUri { get; set; }

		/// <summary>
		/// The type of storage to use for the managed disk.
		/// Allowable values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
		/// </summary>
		public Pulumi.IO<string> StorageAccountType { get; set; }

		/// <summary>
		/// A mapping of tags to assign to the resource.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Tags { get; set; }

		/// <summary>
		/// A collection containing the availability zone to allocate the Managed Disk in.
		/// </summary>
		public Pulumi.IO<string> Zones { get; set; }

		public ManagedDisk(string name, ManagedDiskArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("azure:compute/managedDisk:ManagedDisk", name, SerialiseArgs(args), opts) {
			CreateOption = base.Outputs["createOption"].Select(item => Protobuf.ToString(item));
			DiskSizeGb = base.Outputs["diskSizeGb"].Select(item => Protobuf.ToInt(item));
			EncryptionSettings = base.Outputs["encryptionSettings"].Select(item => ManagedDiskEncryptionSetting.FromProtobuf(item));
			ImageReferenceId = base.Outputs["imageReferenceId"].Select(item => Protobuf.ToString(item));
			Location = base.Outputs["location"].Select(item => Protobuf.ToString(item));
			Name = base.Outputs["name"].Select(item => Protobuf.ToString(item));
			OsType = base.Outputs["osType"].Select(item => Protobuf.ToString(item));
			ResourceGroupName = base.Outputs["resourceGroupName"].Select(item => Protobuf.ToString(item));
			SourceResourceId = base.Outputs["sourceResourceId"].Select(item => Protobuf.ToString(item));
			SourceUri = base.Outputs["sourceUri"].Select(item => Protobuf.ToString(item));
			StorageAccountType = base.Outputs["storageAccountType"].Select(item => Protobuf.ToString(item));
			Tags = base.Outputs["tags"].Select(item => Protobuf.ToMap(item));
			Zones = base.Outputs["zones"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ManagedDiskArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["createOption"] = Protobuf.ToProtobuf(args.CreateOption);
			props["diskSizeGb"] = Protobuf.ToProtobuf(args.DiskSizeGb);
			props["encryptionSettings"] = Protobuf.ToProtobuf(args.EncryptionSettings);
			props["imageReferenceId"] = Protobuf.ToProtobuf(args.ImageReferenceId);
			props["location"] = Protobuf.ToProtobuf(args.Location);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["osType"] = Protobuf.ToProtobuf(args.OsType);
			props["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);
			props["sourceResourceId"] = Protobuf.ToProtobuf(args.SourceResourceId);
			props["sourceUri"] = Protobuf.ToProtobuf(args.SourceUri);
			props["storageAccountType"] = Protobuf.ToProtobuf(args.StorageAccountType);
			props["tags"] = Protobuf.ToProtobuf(args.Tags);
			props["zones"] = Protobuf.ToProtobuf(args.Zones);
			return props;
		} // SerialiseArgs

	} // ManagedDisk
} // Pulumi.Azure.Compute
