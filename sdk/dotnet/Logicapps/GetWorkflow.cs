// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Azure.Logicapps {

	/// <summary>
	/// A collection of arguments for invoking getWorkflow.
	/// </summary>
	public struct GetWorkflowArgs {
		/// <summary>
		/// The name of the Logic App Workflow.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The name of the Resource Group in which the Logic App Workflow exists.
		/// </summary>
		public string ResourceGroupName { get; set; }

	} // GetWorkflowArgs

	/// <summary>
	/// A collection of values returned by getWorkflow.
	/// </summary>
	public struct GetWorkflowResult {
		/// <summary>
		/// The Access Endpoint for the Logic App Workflow
		/// </summary>
		public string AccessEndpoint { get; set; }

		/// <summary>
		/// The Azure location where the Logic App Workflow exists.
		/// </summary>
		public string Location { get; set; }

		/// <summary>
		/// A map of Key-Value pairs.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }

		/// <summary>
		/// A mapping of tags assigned to the resource.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }

		/// <summary>
		/// The Schema used for this Logic App Workflow.
		/// </summary>
		public string WorkflowSchema { get; set; }

		/// <summary>
		/// The version of the Schema used for this Logic App Workflow. Defaults to `1.0.0.0`.
		/// </summary>
		public string WorkflowVersion { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetWorkflowResult

	public static partial class LogicappsModule {
		/// <summary>
		/// Use this data source to access information about an existing Logic App Workflow.
		/// </summary>
		public static System.Threading.Tasks.Task<GetWorkflowResult> GetWorkflow(GetWorkflowArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["resourceGroupName"] = Protobuf.ToProtobuf(args.ResourceGroupName);

			var task = Pulumi.Runtime.InvokeAsync("azure:logicapps/getWorkflow:getWorkflow", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetWorkflowResult();
				if (protobuf.Fields.ContainsKey("accessEndpoint")) {
					result.AccessEndpoint = Protobuf.ToString(protobuf.Fields["accessEndpoint"]);
				}
				if (protobuf.Fields.ContainsKey("location")) {
					result.Location = Protobuf.ToString(protobuf.Fields["location"]);
				}
				if (protobuf.Fields.ContainsKey("parameters")) {
					result.Parameters = Protobuf.ToMap(protobuf.Fields["parameters"]);
				}
				if (protobuf.Fields.ContainsKey("tags")) {
					result.Tags = Protobuf.ToMap(protobuf.Fields["tags"]);
				}
				if (protobuf.Fields.ContainsKey("workflowSchema")) {
					result.WorkflowSchema = Protobuf.ToString(protobuf.Fields["workflowSchema"]);
				}
				if (protobuf.Fields.ContainsKey("workflowVersion")) {
					result.WorkflowVersion = Protobuf.ToString(protobuf.Fields["workflowVersion"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetWorkflow

	} // LogicappsModule
} // Pulumi.Azure.Logicapps
